

  AccessToken
    √ should auto-generate id
    √ should auto-generate created date
    √ should be validateable
    .findForRequest()
      √ supports two-arg variant with no options

  AccessToken api:loopback:middleware:token(options)
    loopback.token({})
Sat, 09 May 2015 14:01:53 GMT api:loopback:middleware:token sendRequest get header tokenId expect:
/
authorization
eUeMZvPfdtLhuUg7muppzYTTY8tkSoi0YK1A8MsSRg02ogFzCIVq9OrkOAz2dm8Z
200

Sat, 09 May 2015 14:01:53 GMT api:loopback:middleware:token appget tokenOptions:
{ model: 
   { [Function: ModelConstructor]
     setMaxListeners: [Function],
     emit: [Function],
     addListener: [Function],
     on: [Function],
     once: [Function],
     removeListener: [Function],
     removeAllListeners: [Function],
     listeners: [Function],
     super_: 
      { [Function: ModelConstructor]
        setMaxListeners: [Function],
        emit: [Function],
        addListener: [Function],
        on: [Function],
        once: [Function],
        removeListener: [Function],
        removeAllListeners: [Function],
        listeners: [Function],
        super_: [Object],
        defineProperty: [Function],
        getPropertyType: [Function],
        isProtectedProperty: [Function],
        isHiddenProperty: [Function],
        mixin: [Function],
        getDataSource: [Function],
        observe: [Function],
        removeObserver: [Function],
        clearObservers: [Function],
        notifyObserversOf: [Function],
        _notifyBaseObservers: [Function],
        afterInitialize: null,
        beforeValidate: null,
        afterValidate: null,
        beforeSave: null,
        afterSave: null,
        beforeCreate: null,
        afterCreate: null,
        beforeUpdate: null,
        afterUpdate: null,
        beforeDestroy: null,
        afterDestroy: null,
        validatesPresenceOf: [Function],
        validatesAbsenceOf: [Function],
        validatesLengthOf: [Function],
        validatesNumericalityOf: [Function],
        validatesInclusionOf: [Function],
        validatesExclusionOf: [Function],
        validatesFormatOf: [Function],
        validate: [Function],
        validateAsync: [Function],
        validatesUniquenessOf: [Function],
        getter: {},
        setter: {},
        definition: [Object],
        settings: [Object],
        forEachProperty: [Function],
        attachTo: [Function],
        extend: [Function],
        registerProperty: [Function],
        registry: [Object],
        setup: [Function: setupPersistedModel],
        _ACL: [Function: getACL],
        checkAccess: [Function],
        _getAccessTypeForMethod: [Function],
        getApp: [Function],
        remoteMethod: [Function],
        disableRemoteMethod: [Function],
        belongsToRemoting: [Function],
        hasOneRemoting: [Function],
        hasManyRemoting: [Function],
        scopeRemoting: [Function],
        nestRemoting: [Function],
        ValidationError: [Object],
        sharedClass: [Object],
        sharedCtor: [Object],
        beforeRemote: [Function],
        afterRemote: [Function],
        afterRemoteError: [Function],
        _runWhenAttachedToApp: [Function],
        create: [Object],
        updateOrCreate: [Object],
        upsert: [Object],
        findOrCreate: [Function: findOrCreate],
        exists: [Object],
        findById: [Object],
        find: [Object],
        findOne: [Object],
        destroyAll: [Object],
        remove: [Object],
        deleteAll: [Object],
        updateAll: [Object],
        update: [Object],
        destroyById: [Object],
        removeById: [Object],
        deleteById: [Object],
        count: [Object],
        getIdName: [Function],
        setupRemoting: [Function],
        diff: [Function],
        changes: [Function],
        checkpoint: [Function],
        currentCheckpoint: [Function],
        replicate: [Function],
        createUpdates: [Function],
        bulkUpdate: [Function],
        getChangeModel: [Function],
        getSourceId: [Function],
        enableChangeTracking: [Function],
        _defineChangeModel: [Function],
        rectifyAllChanges: [Function],
        handleChangeError: [Function],
        rectifyChange: [Function],
        findLastChange: [Function],
        updateLastChange: [Function],
        ANONYMOUS: [Object],
        createAccessTokenId: [Function],
        findForRequest: [Function],
        autoAttach: 'db',
        _mixins: [Object],
        _forDB: [Function],
        defaultScope: [Function],
        applyScope: [Function],
        applyProperties: [Function],
        lookupModel: [Function],
        findByIds: [Function],
        all: [Function],
        _normalize: [Function],
        _coerce: [Function],
        scope: [Function],
        normalizeInclude: [Function: normalizeInclude],
        include: [Function],
        hasMany: [Function: hasMany],
        belongsTo: [Function],
        hasAndBelongsToMany: [Function: hasAndBelongsToMany],
        hasOne: [Function: hasOne],
        referencesMany: [Function: referencesMany],
        embedsOne: [Function: embedsOne],
        embedsMany: [Function: embedsMany],
        _scopeMeta: {},
        shared: false,
        app: [Object] },
     defineProperty: [Function],
     getPropertyType: [Function],
     isProtectedProperty: [Function],
     isHiddenProperty: [Function],
     mixin: [Function],
     getDataSource: [Function],
     observe: [Function],
     removeObserver: [Function],
     clearObservers: [Function],
     notifyObserversOf: [Function],
     _notifyBaseObservers: [Function],
     afterInitialize: null,
     beforeValidate: null,
     afterValidate: null,
     beforeSave: null,
     afterSave: null,
     beforeCreate: null,
     afterCreate: null,
     beforeUpdate: null,
     afterUpdate: null,
     beforeDestroy: null,
     afterDestroy: null,
     validatesPresenceOf: [Function],
     validatesAbsenceOf: [Function],
     validatesLengthOf: [Function],
     validatesNumericalityOf: [Function],
     validatesInclusionOf: [Function],
     validatesExclusionOf: [Function],
     validatesFormatOf: [Function],
     validate: [Function],
     validateAsync: [Function],
     validatesUniquenessOf: [Function],
     getter: {},
     setter: {},
     definition: 
      { modelBuilder: [Object],
        name: 'MyToken',
        rawProperties: [Object],
        settings: [Object],
        relations: [],
        properties: [Object],
        _ids: [Object] },
     settings: 
      { strict: false,
        base: [Object],
        relations: [Object],
        acls: [Object] },
     forEachProperty: [Function],
     attachTo: [Function],
     extend: [Function],
     registerProperty: [Function],
     registry: 
      { defaultDataSources: [Object],
        modelBuilder: [Object],
        _memoryDataSources: [Object] },
     setup: [Function: setupPersistedModel],
     _ACL: [Function: getACL],
     checkAccess: [Function],
     _getAccessTypeForMethod: [Function],
     getApp: [Function],
     remoteMethod: [Function],
     disableRemoteMethod: [Function],
     belongsToRemoting: [Function],
     hasOneRemoting: [Function],
     hasManyRemoting: [Function],
     scopeRemoting: [Function],
     nestRemoting: [Function],
     ValidationError: { [Function: ValidationError] super_: [Object], maxPropertyStringLength: 32 },
     sharedClass: 
      { name: 'MyToken',
        ctor: [Circular],
        _methods: [Object],
        _resolvers: [Object],
        _disabledMethods: {},
        http: [Object],
        sharedCtor: [Object] },
     sharedCtor: { [Function] accepts: [Object], http: [Object], returns: [Object] },
     beforeRemote: [Function],
     afterRemote: [Function],
     afterRemoteError: [Function],
     _runWhenAttachedToApp: [Function],
     create: { [Function] _delegate: true },
     updateOrCreate: { [Function: upsert] _delegate: true },
     upsert: { [Function: upsert] _delegate: true },
     findOrCreate: [Function: findOrCreate],
     exists: { [Function: exists] _delegate: true },
     findById: { [Function: find] _delegate: true },
     find: { [Function: find] _delegate: true },
     findOne: { [Function: findOne] _delegate: true },
     destroyAll: { [Function: destroyAll] _delegate: true },
     remove: { [Function: destroyAll] _delegate: true },
     deleteAll: { [Function: destroyAll] _delegate: true },
     updateAll: { [Function] _delegate: true },
     update: { [Function] _delegate: true },
     destroyById: { [Function: deleteById] _delegate: true },
     removeById: { [Function: deleteById] _delegate: true },
     deleteById: { [Function: deleteById] _delegate: true },
     count: { [Function] _delegate: true },
     getIdName: [Function],
     setupRemoting: [Function],
     diff: [Function],
     changes: [Function],
     checkpoint: [Function],
     currentCheckpoint: [Function],
     replicate: [Function],
     createUpdates: [Function],
     bulkUpdate: [Function],
     getChangeModel: [Function],
     getSourceId: [Function],
     enableChangeTracking: [Function],
     _defineChangeModel: [Function],
     rectifyAllChanges: [Function],
     handleChangeError: [Function],
     rectifyChange: [Function],
     findLastChange: [Function],
     updateLastChange: [Function],
     ANONYMOUS: 
      { id: '$anonymous',
        created: Sat May 09 2015 16:01:53 GMT+0200 (Romance Daylight Time),
        ttl: 1209600 },
     createAccessTokenId: [Function],
     findForRequest: [Function],
     autoAttach: 'db',
     _forDB: [Function],
     defaultScope: [Function],
     applyScope: [Function],
     applyProperties: [Function],
     lookupModel: [Function],
     findByIds: [Function],
     all: [Function],
     _normalize: [Function],
     _coerce: [Function],
     scope: [Function],
     normalizeInclude: [Function: normalizeInclude],
     include: [Function],
     hasMany: [Function: hasMany],
     belongsTo: [Function],
     hasAndBelongsToMany: [Function: hasAndBelongsToMany],
     hasOne: [Function: hasOne],
     referencesMany: [Function: referencesMany],
     embedsOne: [Function: embedsOne],
     embedsMany: [Function: embedsMany],
     _scopeMeta: {},
     shared: false,
     app: 
      { [Function]
        domain: undefined,
        _events: [Object],
        _maxListeners: undefined,
        setMaxListeners: [Function: setMaxListeners],
        emit: [Function: emit],
        addListener: [Function: addListener],
        on: [Function: addListener],
        once: [Function: once],
        removeListener: [Function: removeListener],
        removeAllListeners: [Function: removeAllListeners],
        listeners: [Function: listeners],
        init: [Function],
        defaultConfiguration: [Function],
        lazyrouter: [Function],
        handle: [Function],
        use: [Function: use],
        route: [Function],
        engine: [Function],
        param: [Function],
        set: [Function],
        path: [Function],
        enabled: [Function],
        disabled: [Function],
        enable: [Function],
        disable: [Function],
        checkout: [Function],
        connect: [Function],
        copy: [Function],
        delete: [Function],
        get: [Function],
        head: [Function],
        lock: [Function],
        'm-search': [Function],
        merge: [Function],
        mkactivity: [Function],
        mkcol: [Function],
        move: [Function],
        notify: [Function],
        options: [Function],
        patch: [Function],
        post: [Function],
        propfind: [Function],
        proppatch: [Function],
        purge: [Function],
        put: [Function],
        report: [Function],
        search: [Function],
        subscribe: [Function],
        trace: [Function],
        unlock: [Function],
        unsubscribe: [Function],
        all: [Function],
        del: [Function],
        render: [Function],
        listen: [Function],
        request: [Object],
        response: [Object],
        cache: {},
        settings: [Object],
        engines: {},
        locals: [Object],
        mountpath: '/',
        __expressLazyRouter: [Function],
        _sortLayersByPhase: [Function],
        _findLayerByHandler: [Function],
        middleware: [Function],
        defineMiddlewarePhases: [Function],
        middlewareFromConfig: [Function],
        boot: [Function],
        enableAuth: [Function],
        dataSources: [Object],
        datasources: [Object],
        handler: [Function],
        remoteObjects: [Function],
        connector: [Function],
        dataSource: [Function],
        models: [Object],
        model: [Function],
        disuse: [Function],
        remotes: [Function],
        loopback: [Object],
        connectors: [Object],
        registry: [Object],
        _remotes: [Object],
        isAuthEnabled: true,
        booting: false,
        _models: [Object],
        _handlers: undefined,
        _router: [Object],
        _requestHandlingPhases: [Object] },
     _mixins: [ [Object], [Object], [Object] ] },
  currentUserLiteral: 'me' }

Sat, 09 May 2015 14:01:53 GMT api:loopback:middleware:token appget req:
{ _readableState: 
   { objectMode: false,
     highWaterMark: 16384,
     buffer: [],
     length: 0,
     pipes: null,
     pipesCount: 0,
     flowing: null,
     ended: true,
     endEmitted: false,
     reading: false,
     sync: true,
     needReadable: false,
     emittedReadable: true,
     readableListening: false,
     defaultEncoding: 'utf8',
     ranOut: false,
     awaitDrain: 0,
     readingMore: false,
     decoder: null,
     encoding: null },
  readable: true,
  domain: null,
  _events: {},
  _maxListeners: undefined,
  socket: 
   { _connecting: false,
     _hadError: false,
     _handle: 
      { fd: undefined,
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0 },
     _host: null,
     _readableState: 
      { objectMode: false,
        highWaterMark: 16384,
        buffer: [],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        defaultEncoding: 'utf8',
        ranOut: false,
        awaitDrain: 0,
        readingMore: true,
        decoder: null,
        encoding: null,
        resumeScheduled: false },
     readable: true,
     domain: null,
     _events: 
      { end: [Object],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Object],
        timeout: [Function],
        error: [Function: socketOnError],
        close: [Object],
        data: [Function: socketOnData] },
     _maxListeners: undefined,
     _writableState: 
      { objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false },
     writable: true,
     allowHalfOpen: true,
     destroyed: false,
     bytesRead: 208,
     _bytesDispatched: 0,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      { domain: null,
        _events: [Object],
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        _connectionKey: '4:null:0' },
     _idleTimeout: 120000,
     _idleNext: { _idleNext: [Circular], _idlePrev: [Circular] },
     _idlePrev: { _idleNext: [Circular], _idlePrev: [Circular] },
     _idleStart: 1035105,
     parser: 
      { '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        _headers: [],
        _url: '',
        socket: [Circular],
        incoming: [Circular],
        maxHeaderPairs: 2000,
        onIncoming: [Function: parserOnIncoming] },
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: 
      { domain: null,
        _events: [Object],
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        writable: true,
        _last: false,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedHeader: {},
        _hasBody: true,
        _trailer: '',
        finished: false,
        _hangupClose: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _headers: [Object],
        _headerNames: [Object],
        req: [Circular],
        locals: {} } },
  connection: 
   { _connecting: false,
     _hadError: false,
     _handle: 
      { fd: undefined,
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0 },
     _host: null,
     _readableState: 
      { objectMode: false,
        highWaterMark: 16384,
        buffer: [],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        defaultEncoding: 'utf8',
        ranOut: false,
        awaitDrain: 0,
        readingMore: true,
        decoder: null,
        encoding: null,
        resumeScheduled: false },
     readable: true,
     domain: null,
     _events: 
      { end: [Object],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Object],
        timeout: [Function],
        error: [Function: socketOnError],
        close: [Object],
        data: [Function: socketOnData] },
     _maxListeners: undefined,
     _writableState: 
      { objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false },
     writable: true,
     allowHalfOpen: true,
     destroyed: false,
     bytesRead: 208,
     _bytesDispatched: 0,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      { domain: null,
        _events: [Object],
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        _connectionKey: '4:null:0' },
     _idleTimeout: 120000,
     _idleNext: { _idleNext: [Circular], _idlePrev: [Circular] },
     _idlePrev: { _idleNext: [Circular], _idlePrev: [Circular] },
     _idleStart: 1035105,
     parser: 
      { '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        _headers: [],
        _url: '',
        socket: [Circular],
        incoming: [Circular],
        maxHeaderPairs: 2000,
        onIncoming: [Function: parserOnIncoming] },
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: 
      { domain: null,
        _events: [Object],
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        writable: true,
        _last: false,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedHeader: {},
        _hasBody: true,
        _trailer: '',
        finished: false,
        _hangupClose: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _headers: [Object],
        _headerNames: [Object],
        req: [Circular],
        locals: {} } },
  httpVersionMajor: 1,
  httpVersionMinor: 1,
  httpVersion: '1.1',
  complete: true,
  headers: 
   { host: '127.0.0.1:1346',
     'accept-encoding': 'gzip, deflate',
     'user-agent': 'node-superagent/0.21.0',
     authorization: 'eUeMZvPfdtLhuUg7muppzYTTY8tkSoi0YK1A8MsSRg02ogFzCIVq9OrkOAz2dm8Z',
     connection: 'close' },
  rawHeaders: 
   [ 'Host',
     '127.0.0.1:1346',
     'Accept-Encoding',
     'gzip, deflate',
     'User-Agent',
     'node-superagent/0.21.0',
     'authorization',
     'eUeMZvPfdtLhuUg7muppzYTTY8tkSoi0YK1A8MsSRg02ogFzCIVq9OrkOAz2dm8Z',
     'Connection',
     'close' ],
  trailers: {},
  rawTrailers: [],
  _pendings: [],
  _pendingIndex: 0,
  upgrade: false,
  url: '/',
  method: 'GET',
  statusCode: null,
  statusMessage: null,
  client: 
   { _connecting: false,
     _hadError: false,
     _handle: 
      { fd: undefined,
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0 },
     _host: null,
     _readableState: 
      { objectMode: false,
        highWaterMark: 16384,
        buffer: [],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        defaultEncoding: 'utf8',
        ranOut: false,
        awaitDrain: 0,
        readingMore: true,
        decoder: null,
        encoding: null,
        resumeScheduled: false },
     readable: true,
     domain: null,
     _events: 
      { end: [Object],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Object],
        timeout: [Function],
        error: [Function: socketOnError],
        close: [Object],
        data: [Function: socketOnData] },
     _maxListeners: undefined,
     _writableState: 
      { objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false },
     writable: true,
     allowHalfOpen: true,
     destroyed: false,
     bytesRead: 208,
     _bytesDispatched: 0,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      { domain: null,
        _events: [Object],
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        _connectionKey: '4:null:0' },
     _idleTimeout: 120000,
     _idleNext: { _idleNext: [Circular], _idlePrev: [Circular] },
     _idlePrev: { _idleNext: [Circular], _idlePrev: [Circular] },
     _idleStart: 1035105,
     parser: 
      { '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        _headers: [],
        _url: '',
        socket: [Circular],
        incoming: [Circular],
        maxHeaderPairs: 2000,
        onIncoming: [Function: parserOnIncoming] },
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: 
      { domain: null,
        _events: [Object],
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        writable: true,
        _last: false,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedHeader: {},
        _hasBody: true,
        _trailer: '',
        finished: false,
        _hangupClose: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _headers: [Object],
        _headerNames: [Object],
        req: [Circular],
        locals: {} } },
  _consuming: false,
  _dumped: false,
  next: [Function: next],
  baseUrl: '',
  originalUrl: '/',
  _parsedUrl: 
   { protocol: null,
     slashes: null,
     auth: null,
     host: null,
     port: null,
     hostname: null,
     hash: null,
     search: null,
     query: null,
     pathname: '/',
     path: '/',
     href: '/',
     _raw: '/' },
  params: {},
  query: {},
  res: 
   { domain: null,
     _events: { prefinish: [Function: resOnFinish] },
     _maxListeners: undefined,
     output: [],
     outputEncodings: [],
     outputCallbacks: [],
     writable: true,
     _last: false,
     chunkedEncoding: false,
     shouldKeepAlive: false,
     useChunkedEncodingByDefault: true,
     sendDate: true,
     _removedHeader: {},
     _hasBody: true,
     _trailer: '',
     finished: false,
     _hangupClose: false,
     _headerSent: false,
     socket: 
      { _connecting: false,
        _hadError: false,
        _handle: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: true,
        destroyed: false,
        bytesRead: 208,
        _bytesDispatched: 0,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Object],
        _idleStart: 1035105,
        parser: [Object],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Circular] },
     connection: 
      { _connecting: false,
        _hadError: false,
        _handle: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: true,
        destroyed: false,
        bytesRead: 208,
        _bytesDispatched: 0,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Object],
        _idleStart: 1035105,
        parser: [Object],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Circular] },
     _header: null,
     _headers: { 'x-powered-by': 'Express' },
     _headerNames: { 'x-powered-by': 'X-Powered-By' },
     req: [Circular],
     locals: {} },
  accessToken: 
   { id: 'eUeMZvPfdtLhuUg7muppzYTTY8tkSoi0YK1A8MsSRg02ogFzCIVq9OrkOAz2dm8Z',
     ttl: 1209600,
     created: Sat May 09 2015 16:01:53 GMT+0200 (Romance Daylight Time),
     userId: 123 },
  route: { path: '/', stack: [ [Object] ], methods: { get: true } } }

Sat, 09 May 2015 14:01:53 GMT api:loopback:middleware:token appGet token:
{ id: 'eUeMZvPfdtLhuUg7muppzYTTY8tkSoi0YK1A8MsSRg02ogFzCIVq9OrkOAz2dm8Z',
  ttl: 1209600,
  created: Sat May 09 2015 16:01:53 GMT+0200 (Romance Daylight Time),
  userId: 123 }

      √ header authorization (47ms)
    options.searchDefaultTokenKeys:[true|false]
      normal usage for options.searchDefaultTokenKeys
Sat, 09 May 2015 14:01:53 GMT loopback:middleware:token token FIXME: check that there is a definition for a Token Key, otherwise Warn?
Sat, 09 May 2015 14:01:53 GMT api:loopback:middleware:token sendRequest get header tokenId expect:
/
authorization
Qxss498fJ8sihUWJbcr2acyfAUxwADo1CwFH7Jx0HbjlkW2tegOHPu5nFw4YTH0K
200

Sat, 09 May 2015 14:01:53 GMT api:loopback:middleware:token appget tokenOptions:
{ searchDefaultTokenKeys: false,
  headers: [ 'authorization' ],
  model: 
   { [Function: ModelConstructor]
     setMaxListeners: [Function],
     emit: [Function],
     addListener: [Function],
     on: [Function],
     once: [Function],
     removeListener: [Function],
     removeAllListeners: [Function],
     listeners: [Function],
     super_: 
      { [Function: ModelConstructor]
        setMaxListeners: [Function],
        emit: [Function],
        addListener: [Function],
        on: [Function],
        once: [Function],
        removeListener: [Function],
        removeAllListeners: [Function],
        listeners: [Function],
        super_: [Object],
        defineProperty: [Function],
        getPropertyType: [Function],
        isProtectedProperty: [Function],
        isHiddenProperty: [Function],
        mixin: [Function],
        getDataSource: [Function],
        observe: [Function],
        removeObserver: [Function],
        clearObservers: [Function],
        notifyObserversOf: [Function],
        _notifyBaseObservers: [Function],
        afterInitialize: null,
        beforeValidate: null,
        afterValidate: null,
        beforeSave: null,
        afterSave: null,
        beforeCreate: null,
        afterCreate: null,
        beforeUpdate: null,
        afterUpdate: null,
        beforeDestroy: null,
        afterDestroy: null,
        validatesPresenceOf: [Function],
        validatesAbsenceOf: [Function],
        validatesLengthOf: [Function],
        validatesNumericalityOf: [Function],
        validatesInclusionOf: [Function],
        validatesExclusionOf: [Function],
        validatesFormatOf: [Function],
        validate: [Function],
        validateAsync: [Function],
        validatesUniquenessOf: [Function],
        getter: {},
        setter: {},
        definition: [Object],
        settings: [Object],
        forEachProperty: [Function],
        attachTo: [Function],
        extend: [Function],
        registerProperty: [Function],
        registry: [Object],
        setup: [Function: setupPersistedModel],
        _ACL: [Function: getACL],
        checkAccess: [Function],
        _getAccessTypeForMethod: [Function],
        getApp: [Function],
        remoteMethod: [Function],
        disableRemoteMethod: [Function],
        belongsToRemoting: [Function],
        hasOneRemoting: [Function],
        hasManyRemoting: [Function],
        scopeRemoting: [Function],
        nestRemoting: [Function],
        ValidationError: [Object],
        sharedClass: [Object],
        sharedCtor: [Object],
        beforeRemote: [Function],
        afterRemote: [Function],
        afterRemoteError: [Function],
        _runWhenAttachedToApp: [Function],
        create: [Object],
        updateOrCreate: [Object],
        upsert: [Object],
        findOrCreate: [Function: findOrCreate],
        exists: [Object],
        findById: [Object],
        find: [Object],
        findOne: [Object],
        destroyAll: [Object],
        remove: [Object],
        deleteAll: [Object],
        updateAll: [Object],
        update: [Object],
        destroyById: [Object],
        removeById: [Object],
        deleteById: [Object],
        count: [Object],
        getIdName: [Function],
        setupRemoting: [Function],
        diff: [Function],
        changes: [Function],
        checkpoint: [Function],
        currentCheckpoint: [Function],
        replicate: [Function],
        createUpdates: [Function],
        bulkUpdate: [Function],
        getChangeModel: [Function],
        getSourceId: [Function],
        enableChangeTracking: [Function],
        _defineChangeModel: [Function],
        rectifyAllChanges: [Function],
        handleChangeError: [Function],
        rectifyChange: [Function],
        findLastChange: [Function],
        updateLastChange: [Function],
        ANONYMOUS: [Object],
        createAccessTokenId: [Function],
        findForRequest: [Function],
        autoAttach: 'db',
        _mixins: [Object],
        _forDB: [Function],
        defaultScope: [Function],
        applyScope: [Function],
        applyProperties: [Function],
        lookupModel: [Function],
        findByIds: [Function],
        all: [Function],
        _normalize: [Function],
        _coerce: [Function],
        scope: [Function],
        normalizeInclude: [Function: normalizeInclude],
        include: [Function],
        hasMany: [Function: hasMany],
        belongsTo: [Function],
        hasAndBelongsToMany: [Function: hasAndBelongsToMany],
        hasOne: [Function: hasOne],
        referencesMany: [Function: referencesMany],
        embedsOne: [Function: embedsOne],
        embedsMany: [Function: embedsMany],
        _scopeMeta: {},
        shared: false,
        app: [Object] },
     defineProperty: [Function],
     getPropertyType: [Function],
     isProtectedProperty: [Function],
     isHiddenProperty: [Function],
     mixin: [Function],
     getDataSource: [Function],
     observe: [Function],
     removeObserver: [Function],
     clearObservers: [Function],
     notifyObserversOf: [Function],
     _notifyBaseObservers: [Function],
     afterInitialize: null,
     beforeValidate: null,
     afterValidate: null,
     beforeSave: null,
     afterSave: null,
     beforeCreate: null,
     afterCreate: null,
     beforeUpdate: null,
     afterUpdate: null,
     beforeDestroy: null,
     afterDestroy: null,
     validatesPresenceOf: [Function],
     validatesAbsenceOf: [Function],
     validatesLengthOf: [Function],
     validatesNumericalityOf: [Function],
     validatesInclusionOf: [Function],
     validatesExclusionOf: [Function],
     validatesFormatOf: [Function],
     validate: [Function],
     validateAsync: [Function],
     validatesUniquenessOf: [Function],
     getter: {},
     setter: {},
     definition: 
      { modelBuilder: [Object],
        name: 'MyToken',
        rawProperties: [Object],
        settings: [Object],
        relations: [],
        properties: [Object],
        _ids: [Object] },
     settings: 
      { strict: false,
        base: [Object],
        relations: [Object],
        acls: [Object] },
     forEachProperty: [Function],
     attachTo: [Function],
     extend: [Function],
     registerProperty: [Function],
     registry: 
      { defaultDataSources: [Object],
        modelBuilder: [Object],
        _memoryDataSources: [Object] },
     setup: [Function: setupPersistedModel],
     _ACL: [Function: getACL],
     checkAccess: [Function],
     _getAccessTypeForMethod: [Function],
     getApp: [Function],
     remoteMethod: [Function],
     disableRemoteMethod: [Function],
     belongsToRemoting: [Function],
     hasOneRemoting: [Function],
     hasManyRemoting: [Function],
     scopeRemoting: [Function],
     nestRemoting: [Function],
     ValidationError: { [Function: ValidationError] super_: [Object], maxPropertyStringLength: 32 },
     sharedClass: 
      { name: 'MyToken',
        ctor: [Circular],
        _methods: [Object],
        _resolvers: [Object],
        _disabledMethods: {},
        http: [Object],
        sharedCtor: [Object] },
     sharedCtor: { [Function] accepts: [Object], http: [Object], returns: [Object] },
     beforeRemote: [Function],
     afterRemote: [Function],
     afterRemoteError: [Function],
     _runWhenAttachedToApp: [Function],
     create: { [Function] _delegate: true },
     updateOrCreate: { [Function: upsert] _delegate: true },
     upsert: { [Function: upsert] _delegate: true },
     findOrCreate: [Function: findOrCreate],
     exists: { [Function: exists] _delegate: true },
     findById: { [Function: find] _delegate: true },
     find: { [Function: find] _delegate: true },
     findOne: { [Function: findOne] _delegate: true },
     destroyAll: { [Function: destroyAll] _delegate: true },
     remove: { [Function: destroyAll] _delegate: true },
     deleteAll: { [Function: destroyAll] _delegate: true },
     updateAll: { [Function] _delegate: true },
     update: { [Function] _delegate: true },
     destroyById: { [Function: deleteById] _delegate: true },
     removeById: { [Function: deleteById] _delegate: true },
     deleteById: { [Function: deleteById] _delegate: true },
     count: { [Function] _delegate: true },
     getIdName: [Function],
     setupRemoting: [Function],
     diff: [Function],
     changes: [Function],
     checkpoint: [Function],
     currentCheckpoint: [Function],
     replicate: [Function],
     createUpdates: [Function],
     bulkUpdate: [Function],
     getChangeModel: [Function],
     getSourceId: [Function],
     enableChangeTracking: [Function],
     _defineChangeModel: [Function],
     rectifyAllChanges: [Function],
     handleChangeError: [Function],
     rectifyChange: [Function],
     findLastChange: [Function],
     updateLastChange: [Function],
     ANONYMOUS: 
      { id: '$anonymous',
        created: Sat May 09 2015 16:01:53 GMT+0200 (Romance Daylight Time),
        ttl: 1209600 },
     createAccessTokenId: [Function],
     findForRequest: [Function],
     autoAttach: 'db',
     _forDB: [Function],
     defaultScope: [Function],
     applyScope: [Function],
     applyProperties: [Function],
     lookupModel: [Function],
     findByIds: [Function],
     all: [Function],
     _normalize: [Function],
     _coerce: [Function],
     scope: [Function],
     normalizeInclude: [Function: normalizeInclude],
     include: [Function],
     hasMany: [Function: hasMany],
     belongsTo: [Function],
     hasAndBelongsToMany: [Function: hasAndBelongsToMany],
     hasOne: [Function: hasOne],
     referencesMany: [Function: referencesMany],
     embedsOne: [Function: embedsOne],
     embedsMany: [Function: embedsMany],
     _scopeMeta: {},
     shared: false,
     app: 
      { [Function]
        domain: undefined,
        _events: [Object],
        _maxListeners: undefined,
        setMaxListeners: [Function: setMaxListeners],
        emit: [Function: emit],
        addListener: [Function: addListener],
        on: [Function: addListener],
        once: [Function: once],
        removeListener: [Function: removeListener],
        removeAllListeners: [Function: removeAllListeners],
        listeners: [Function: listeners],
        init: [Function],
        defaultConfiguration: [Function],
        lazyrouter: [Function],
        handle: [Function],
        use: [Function: use],
        route: [Function],
        engine: [Function],
        param: [Function],
        set: [Function],
        path: [Function],
        enabled: [Function],
        disabled: [Function],
        enable: [Function],
        disable: [Function],
        checkout: [Function],
        connect: [Function],
        copy: [Function],
        delete: [Function],
        get: [Function],
        head: [Function],
        lock: [Function],
        'm-search': [Function],
        merge: [Function],
        mkactivity: [Function],
        mkcol: [Function],
        move: [Function],
        notify: [Function],
        options: [Function],
        patch: [Function],
        post: [Function],
        propfind: [Function],
        proppatch: [Function],
        purge: [Function],
        put: [Function],
        report: [Function],
        search: [Function],
        subscribe: [Function],
        trace: [Function],
        unlock: [Function],
        unsubscribe: [Function],
        all: [Function],
        del: [Function],
        render: [Function],
        listen: [Function],
        request: [Object],
        response: [Object],
        cache: {},
        settings: [Object],
        engines: {},
        locals: [Object],
        mountpath: '/',
        __expressLazyRouter: [Function],
        _sortLayersByPhase: [Function],
        _findLayerByHandler: [Function],
        middleware: [Function],
        defineMiddlewarePhases: [Function],
        middlewareFromConfig: [Function],
        boot: [Function],
        enableAuth: [Function],
        dataSources: [Object],
        datasources: [Object],
        handler: [Function],
        remoteObjects: [Function],
        connector: [Function],
        dataSource: [Function],
        models: [Object],
        model: [Function],
        disuse: [Function],
        remotes: [Function],
        loopback: [Object],
        connectors: [Object],
        registry: [Object],
        _remotes: [Object],
        isAuthEnabled: true,
        booting: false,
        _models: [Object],
        _handlers: undefined,
        _router: [Object],
        _requestHandlingPhases: [Object] },
     _mixins: [ [Object], [Object], [Object] ] },
  currentUserLiteral: 'me' }

Sat, 09 May 2015 14:01:53 GMT api:loopback:middleware:token appget req:
{ _readableState: 
   { objectMode: false,
     highWaterMark: 16384,
     buffer: [],
     length: 0,
     pipes: null,
     pipesCount: 0,
     flowing: null,
     ended: true,
     endEmitted: false,
     reading: false,
     sync: true,
     needReadable: false,
     emittedReadable: true,
     readableListening: false,
     defaultEncoding: 'utf8',
     ranOut: false,
     awaitDrain: 0,
     readingMore: false,
     decoder: null,
     encoding: null },
  readable: true,
  domain: null,
  _events: {},
  _maxListeners: undefined,
  socket: 
   { _connecting: false,
     _hadError: false,
     _handle: 
      { fd: undefined,
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0 },
     _host: null,
     _readableState: 
      { objectMode: false,
        highWaterMark: 16384,
        buffer: [],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        defaultEncoding: 'utf8',
        ranOut: false,
        awaitDrain: 0,
        readingMore: true,
        decoder: null,
        encoding: null,
        resumeScheduled: false },
     readable: true,
     domain: null,
     _events: 
      { end: [Object],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Object],
        timeout: [Function],
        error: [Function: socketOnError],
        close: [Object],
        data: [Function: socketOnData] },
     _maxListeners: undefined,
     _writableState: 
      { objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false },
     writable: true,
     allowHalfOpen: true,
     destroyed: false,
     bytesRead: 208,
     _bytesDispatched: 0,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      { domain: null,
        _events: [Object],
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        _connectionKey: '4:null:0' },
     _idleTimeout: 120000,
     _idleNext: 
      { [Function: utcDate]
        _onTimeout: [Function],
        _idleTimeout: 181,
        _idleNext: [Object],
        _idlePrev: [Circular],
        _idleStart: 1035123 },
     _idlePrev: { _idleNext: [Circular], _idlePrev: [Object] },
     _idleStart: 1035137,
     parser: 
      { '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        _headers: [],
        _url: '',
        socket: [Circular],
        incoming: [Circular],
        maxHeaderPairs: 2000,
        onIncoming: [Function: parserOnIncoming] },
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: 
      { domain: null,
        _events: [Object],
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        writable: true,
        _last: false,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedHeader: {},
        _hasBody: true,
        _trailer: '',
        finished: false,
        _hangupClose: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _headers: [Object],
        _headerNames: [Object],
        req: [Circular],
        locals: {} } },
  connection: 
   { _connecting: false,
     _hadError: false,
     _handle: 
      { fd: undefined,
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0 },
     _host: null,
     _readableState: 
      { objectMode: false,
        highWaterMark: 16384,
        buffer: [],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        defaultEncoding: 'utf8',
        ranOut: false,
        awaitDrain: 0,
        readingMore: true,
        decoder: null,
        encoding: null,
        resumeScheduled: false },
     readable: true,
     domain: null,
     _events: 
      { end: [Object],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Object],
        timeout: [Function],
        error: [Function: socketOnError],
        close: [Object],
        data: [Function: socketOnData] },
     _maxListeners: undefined,
     _writableState: 
      { objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false },
     writable: true,
     allowHalfOpen: true,
     destroyed: false,
     bytesRead: 208,
     _bytesDispatched: 0,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      { domain: null,
        _events: [Object],
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        _connectionKey: '4:null:0' },
     _idleTimeout: 120000,
     _idleNext: 
      { [Function: utcDate]
        _onTimeout: [Function],
        _idleTimeout: 181,
        _idleNext: [Object],
        _idlePrev: [Circular],
        _idleStart: 1035123 },
     _idlePrev: { _idleNext: [Circular], _idlePrev: [Object] },
     _idleStart: 1035137,
     parser: 
      { '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        _headers: [],
        _url: '',
        socket: [Circular],
        incoming: [Circular],
        maxHeaderPairs: 2000,
        onIncoming: [Function: parserOnIncoming] },
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: 
      { domain: null,
        _events: [Object],
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        writable: true,
        _last: false,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedHeader: {},
        _hasBody: true,
        _trailer: '',
        finished: false,
        _hangupClose: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _headers: [Object],
        _headerNames: [Object],
        req: [Circular],
        locals: {} } },
  httpVersionMajor: 1,
  httpVersionMinor: 1,
  httpVersion: '1.1',
  complete: true,
  headers: 
   { host: '127.0.0.1:1348',
     'accept-encoding': 'gzip, deflate',
     'user-agent': 'node-superagent/0.21.0',
     authorization: 'Qxss498fJ8sihUWJbcr2acyfAUxwADo1CwFH7Jx0HbjlkW2tegOHPu5nFw4YTH0K',
     connection: 'close' },
  rawHeaders: 
   [ 'Host',
     '127.0.0.1:1348',
     'Accept-Encoding',
     'gzip, deflate',
     'User-Agent',
     'node-superagent/0.21.0',
     'authorization',
     'Qxss498fJ8sihUWJbcr2acyfAUxwADo1CwFH7Jx0HbjlkW2tegOHPu5nFw4YTH0K',
     'Connection',
     'close' ],
  trailers: {},
  rawTrailers: [],
  _pendings: [],
  _pendingIndex: 0,
  upgrade: false,
  url: '/',
  method: 'GET',
  statusCode: null,
  statusMessage: null,
  client: 
   { _connecting: false,
     _hadError: false,
     _handle: 
      { fd: undefined,
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0 },
     _host: null,
     _readableState: 
      { objectMode: false,
        highWaterMark: 16384,
        buffer: [],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        defaultEncoding: 'utf8',
        ranOut: false,
        awaitDrain: 0,
        readingMore: true,
        decoder: null,
        encoding: null,
        resumeScheduled: false },
     readable: true,
     domain: null,
     _events: 
      { end: [Object],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Object],
        timeout: [Function],
        error: [Function: socketOnError],
        close: [Object],
        data: [Function: socketOnData] },
     _maxListeners: undefined,
     _writableState: 
      { objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false },
     writable: true,
     allowHalfOpen: true,
     destroyed: false,
     bytesRead: 208,
     _bytesDispatched: 0,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      { domain: null,
        _events: [Object],
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        _connectionKey: '4:null:0' },
     _idleTimeout: 120000,
     _idleNext: 
      { [Function: utcDate]
        _onTimeout: [Function],
        _idleTimeout: 181,
        _idleNext: [Object],
        _idlePrev: [Circular],
        _idleStart: 1035123 },
     _idlePrev: { _idleNext: [Circular], _idlePrev: [Object] },
     _idleStart: 1035137,
     parser: 
      { '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        _headers: [],
        _url: '',
        socket: [Circular],
        incoming: [Circular],
        maxHeaderPairs: 2000,
        onIncoming: [Function: parserOnIncoming] },
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: 
      { domain: null,
        _events: [Object],
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        writable: true,
        _last: false,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedHeader: {},
        _hasBody: true,
        _trailer: '',
        finished: false,
        _hangupClose: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _headers: [Object],
        _headerNames: [Object],
        req: [Circular],
        locals: {} } },
  _consuming: false,
  _dumped: false,
  next: [Function: next],
  baseUrl: '',
  originalUrl: '/',
  _parsedUrl: 
   { protocol: null,
     slashes: null,
     auth: null,
     host: null,
     port: null,
     hostname: null,
     hash: null,
     search: null,
     query: null,
     pathname: '/',
     path: '/',
     href: '/',
     _raw: '/' },
  params: {},
  query: {},
  res: 
   { domain: null,
     _events: { prefinish: [Function: resOnFinish] },
     _maxListeners: undefined,
     output: [],
     outputEncodings: [],
     outputCallbacks: [],
     writable: true,
     _last: false,
     chunkedEncoding: false,
     shouldKeepAlive: false,
     useChunkedEncodingByDefault: true,
     sendDate: true,
     _removedHeader: {},
     _hasBody: true,
     _trailer: '',
     finished: false,
     _hangupClose: false,
     _headerSent: false,
     socket: 
      { _connecting: false,
        _hadError: false,
        _handle: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: true,
        destroyed: false,
        bytesRead: 208,
        _bytesDispatched: 0,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Object],
        _idleStart: 1035137,
        parser: [Object],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Circular] },
     connection: 
      { _connecting: false,
        _hadError: false,
        _handle: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: true,
        destroyed: false,
        bytesRead: 208,
        _bytesDispatched: 0,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Object],
        _idleStart: 1035137,
        parser: [Object],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Circular] },
     _header: null,
     _headers: { 'x-powered-by': 'Express' },
     _headerNames: { 'x-powered-by': 'X-Powered-By' },
     req: [Circular],
     locals: {} },
  accessToken: 
   { id: 'Qxss498fJ8sihUWJbcr2acyfAUxwADo1CwFH7Jx0HbjlkW2tegOHPu5nFw4YTH0K',
     ttl: 1209600,
     created: Sat May 09 2015 16:01:53 GMT+0200 (Romance Daylight Time),
     userId: 123 },
  route: { path: '/', stack: [ [Object] ], methods: { get: true } } }

Sat, 09 May 2015 14:01:53 GMT api:loopback:middleware:token appGet token:
{ id: 'Qxss498fJ8sihUWJbcr2acyfAUxwADo1CwFH7Jx0HbjlkW2tegOHPu5nFw4YTH0K',
  ttl: 1209600,
  created: Sat May 09 2015 16:01:53 GMT+0200 (Romance Daylight Time),
  userId: 123 }

        √ header, headers has header, searchDefaultTokenKeys is false
Sat, 09 May 2015 14:01:53 GMT loopback:middleware:token token FIXME: Why not create the DefaultTokenKeys here instead of on each req in tokenIdForRequest
Sat, 09 May 2015 14:01:53 GMT api:loopback:middleware:token sendRequest get header tokenId expect:
/
authorization
OBHikrJt37vSuEGeOm39rRCAW2ObHdKsNv7Mz335EJUlHbEKIXHm5H1oNZFec3wa
200

Sat, 09 May 2015 14:01:53 GMT api:loopback:middleware:token appget tokenOptions:
{ searchDefaultTokenKeys: true,
  headers: [ 'authorization' ],
  model: 
   { [Function: ModelConstructor]
     setMaxListeners: [Function],
     emit: [Function],
     addListener: [Function],
     on: [Function],
     once: [Function],
     removeListener: [Function],
     removeAllListeners: [Function],
     listeners: [Function],
     super_: 
      { [Function: ModelConstructor]
        setMaxListeners: [Function],
        emit: [Function],
        addListener: [Function],
        on: [Function],
        once: [Function],
        removeListener: [Function],
        removeAllListeners: [Function],
        listeners: [Function],
        super_: [Object],
        defineProperty: [Function],
        getPropertyType: [Function],
        isProtectedProperty: [Function],
        isHiddenProperty: [Function],
        mixin: [Function],
        getDataSource: [Function],
        observe: [Function],
        removeObserver: [Function],
        clearObservers: [Function],
        notifyObserversOf: [Function],
        _notifyBaseObservers: [Function],
        afterInitialize: null,
        beforeValidate: null,
        afterValidate: null,
        beforeSave: null,
        afterSave: null,
        beforeCreate: null,
        afterCreate: null,
        beforeUpdate: null,
        afterUpdate: null,
        beforeDestroy: null,
        afterDestroy: null,
        validatesPresenceOf: [Function],
        validatesAbsenceOf: [Function],
        validatesLengthOf: [Function],
        validatesNumericalityOf: [Function],
        validatesInclusionOf: [Function],
        validatesExclusionOf: [Function],
        validatesFormatOf: [Function],
        validate: [Function],
        validateAsync: [Function],
        validatesUniquenessOf: [Function],
        getter: {},
        setter: {},
        definition: [Object],
        settings: [Object],
        forEachProperty: [Function],
        attachTo: [Function],
        extend: [Function],
        registerProperty: [Function],
        registry: [Object],
        setup: [Function: setupPersistedModel],
        _ACL: [Function: getACL],
        checkAccess: [Function],
        _getAccessTypeForMethod: [Function],
        getApp: [Function],
        remoteMethod: [Function],
        disableRemoteMethod: [Function],
        belongsToRemoting: [Function],
        hasOneRemoting: [Function],
        hasManyRemoting: [Function],
        scopeRemoting: [Function],
        nestRemoting: [Function],
        ValidationError: [Object],
        sharedClass: [Object],
        sharedCtor: [Object],
        beforeRemote: [Function],
        afterRemote: [Function],
        afterRemoteError: [Function],
        _runWhenAttachedToApp: [Function],
        create: [Object],
        updateOrCreate: [Object],
        upsert: [Object],
        findOrCreate: [Function: findOrCreate],
        exists: [Object],
        findById: [Object],
        find: [Object],
        findOne: [Object],
        destroyAll: [Object],
        remove: [Object],
        deleteAll: [Object],
        updateAll: [Object],
        update: [Object],
        destroyById: [Object],
        removeById: [Object],
        deleteById: [Object],
        count: [Object],
        getIdName: [Function],
        setupRemoting: [Function],
        diff: [Function],
        changes: [Function],
        checkpoint: [Function],
        currentCheckpoint: [Function],
        replicate: [Function],
        createUpdates: [Function],
        bulkUpdate: [Function],
        getChangeModel: [Function],
        getSourceId: [Function],
        enableChangeTracking: [Function],
        _defineChangeModel: [Function],
        rectifyAllChanges: [Function],
        handleChangeError: [Function],
        rectifyChange: [Function],
        findLastChange: [Function],
        updateLastChange: [Function],
        ANONYMOUS: [Object],
        createAccessTokenId: [Function],
        findForRequest: [Function],
        autoAttach: 'db',
        _mixins: [Object],
        _forDB: [Function],
        defaultScope: [Function],
        applyScope: [Function],
        applyProperties: [Function],
        lookupModel: [Function],
        findByIds: [Function],
        all: [Function],
        _normalize: [Function],
        _coerce: [Function],
        scope: [Function],
        normalizeInclude: [Function: normalizeInclude],
        include: [Function],
        hasMany: [Function: hasMany],
        belongsTo: [Function],
        hasAndBelongsToMany: [Function: hasAndBelongsToMany],
        hasOne: [Function: hasOne],
        referencesMany: [Function: referencesMany],
        embedsOne: [Function: embedsOne],
        embedsMany: [Function: embedsMany],
        _scopeMeta: {},
        shared: false,
        app: [Object] },
     defineProperty: [Function],
     getPropertyType: [Function],
     isProtectedProperty: [Function],
     isHiddenProperty: [Function],
     mixin: [Function],
     getDataSource: [Function],
     observe: [Function],
     removeObserver: [Function],
     clearObservers: [Function],
     notifyObserversOf: [Function],
     _notifyBaseObservers: [Function],
     afterInitialize: null,
     beforeValidate: null,
     afterValidate: null,
     beforeSave: null,
     afterSave: null,
     beforeCreate: null,
     afterCreate: null,
     beforeUpdate: null,
     afterUpdate: null,
     beforeDestroy: null,
     afterDestroy: null,
     validatesPresenceOf: [Function],
     validatesAbsenceOf: [Function],
     validatesLengthOf: [Function],
     validatesNumericalityOf: [Function],
     validatesInclusionOf: [Function],
     validatesExclusionOf: [Function],
     validatesFormatOf: [Function],
     validate: [Function],
     validateAsync: [Function],
     validatesUniquenessOf: [Function],
     getter: {},
     setter: {},
     definition: 
      { modelBuilder: [Object],
        name: 'MyToken',
        rawProperties: [Object],
        settings: [Object],
        relations: [],
        properties: [Object],
        _ids: [Object] },
     settings: 
      { strict: false,
        base: [Object],
        relations: [Object],
        acls: [Object] },
     forEachProperty: [Function],
     attachTo: [Function],
     extend: [Function],
     registerProperty: [Function],
     registry: 
      { defaultDataSources: [Object],
        modelBuilder: [Object],
        _memoryDataSources: [Object] },
     setup: [Function: setupPersistedModel],
     _ACL: [Function: getACL],
     checkAccess: [Function],
     _getAccessTypeForMethod: [Function],
     getApp: [Function],
     remoteMethod: [Function],
     disableRemoteMethod: [Function],
     belongsToRemoting: [Function],
     hasOneRemoting: [Function],
     hasManyRemoting: [Function],
     scopeRemoting: [Function],
     nestRemoting: [Function],
     ValidationError: { [Function: ValidationError] super_: [Object], maxPropertyStringLength: 32 },
     sharedClass: 
      { name: 'MyToken',
        ctor: [Circular],
        _methods: [Object],
        _resolvers: [Object],
        _disabledMethods: {},
        http: [Object],
        sharedCtor: [Object] },
     sharedCtor: { [Function] accepts: [Object], http: [Object], returns: [Object] },
     beforeRemote: [Function],
     afterRemote: [Function],
     afterRemoteError: [Function],
     _runWhenAttachedToApp: [Function],
     create: { [Function] _delegate: true },
     updateOrCreate: { [Function: upsert] _delegate: true },
     upsert: { [Function: upsert] _delegate: true },
     findOrCreate: [Function: findOrCreate],
     exists: { [Function: exists] _delegate: true },
     findById: { [Function: find] _delegate: true },
     find: { [Function: find] _delegate: true },
     findOne: { [Function: findOne] _delegate: true },
     destroyAll: { [Function: destroyAll] _delegate: true },
     remove: { [Function: destroyAll] _delegate: true },
     deleteAll: { [Function: destroyAll] _delegate: true },
     updateAll: { [Function] _delegate: true },
     update: { [Function] _delegate: true },
     destroyById: { [Function: deleteById] _delegate: true },
     removeById: { [Function: deleteById] _delegate: true },
     deleteById: { [Function: deleteById] _delegate: true },
     count: { [Function] _delegate: true },
     getIdName: [Function],
     setupRemoting: [Function],
     diff: [Function],
     changes: [Function],
     checkpoint: [Function],
     currentCheckpoint: [Function],
     replicate: [Function],
     createUpdates: [Function],
     bulkUpdate: [Function],
     getChangeModel: [Function],
     getSourceId: [Function],
     enableChangeTracking: [Function],
     _defineChangeModel: [Function],
     rectifyAllChanges: [Function],
     handleChangeError: [Function],
     rectifyChange: [Function],
     findLastChange: [Function],
     updateLastChange: [Function],
     ANONYMOUS: 
      { id: '$anonymous',
        created: Sat May 09 2015 16:01:53 GMT+0200 (Romance Daylight Time),
        ttl: 1209600 },
     createAccessTokenId: [Function],
     findForRequest: [Function],
     autoAttach: 'db',
     _forDB: [Function],
     defaultScope: [Function],
     applyScope: [Function],
     applyProperties: [Function],
     lookupModel: [Function],
     findByIds: [Function],
     all: [Function],
     _normalize: [Function],
     _coerce: [Function],
     scope: [Function],
     normalizeInclude: [Function: normalizeInclude],
     include: [Function],
     hasMany: [Function: hasMany],
     belongsTo: [Function],
     hasAndBelongsToMany: [Function: hasAndBelongsToMany],
     hasOne: [Function: hasOne],
     referencesMany: [Function: referencesMany],
     embedsOne: [Function: embedsOne],
     embedsMany: [Function: embedsMany],
     _scopeMeta: {},
     shared: false,
     app: 
      { [Function]
        domain: undefined,
        _events: [Object],
        _maxListeners: undefined,
        setMaxListeners: [Function: setMaxListeners],
        emit: [Function: emit],
        addListener: [Function: addListener],
        on: [Function: addListener],
        once: [Function: once],
        removeListener: [Function: removeListener],
        removeAllListeners: [Function: removeAllListeners],
        listeners: [Function: listeners],
        init: [Function],
        defaultConfiguration: [Function],
        lazyrouter: [Function],
        handle: [Function],
        use: [Function: use],
        route: [Function],
        engine: [Function],
        param: [Function],
        set: [Function],
        path: [Function],
        enabled: [Function],
        disabled: [Function],
        enable: [Function],
        disable: [Function],
        checkout: [Function],
        connect: [Function],
        copy: [Function],
        delete: [Function],
        get: [Function],
        head: [Function],
        lock: [Function],
        'm-search': [Function],
        merge: [Function],
        mkactivity: [Function],
        mkcol: [Function],
        move: [Function],
        notify: [Function],
        options: [Function],
        patch: [Function],
        post: [Function],
        propfind: [Function],
        proppatch: [Function],
        purge: [Function],
        put: [Function],
        report: [Function],
        search: [Function],
        subscribe: [Function],
        trace: [Function],
        unlock: [Function],
        unsubscribe: [Function],
        all: [Function],
        del: [Function],
        render: [Function],
        listen: [Function],
        request: [Object],
        response: [Object],
        cache: {},
        settings: [Object],
        engines: {},
        locals: [Object],
        mountpath: '/',
        __expressLazyRouter: [Function],
        _sortLayersByPhase: [Function],
        _findLayerByHandler: [Function],
        middleware: [Function],
        defineMiddlewarePhases: [Function],
        middlewareFromConfig: [Function],
        boot: [Function],
        enableAuth: [Function],
        dataSources: [Object],
        datasources: [Object],
        handler: [Function],
        remoteObjects: [Function],
        connector: [Function],
        dataSource: [Function],
        models: [Object],
        model: [Function],
        disuse: [Function],
        remotes: [Function],
        loopback: [Object],
        connectors: [Object],
        registry: [Object],
        _remotes: [Object],
        isAuthEnabled: true,
        booting: false,
        _models: [Object],
        _handlers: undefined,
        _router: [Object],
        _requestHandlingPhases: [Object] },
     _mixins: [ [Object], [Object], [Object] ] },
  currentUserLiteral: 'me' }

Sat, 09 May 2015 14:01:53 GMT api:loopback:middleware:token appget req:
{ _readableState: 
   { objectMode: false,
     highWaterMark: 16384,
     buffer: [],
     length: 0,
     pipes: null,
     pipesCount: 0,
     flowing: null,
     ended: true,
     endEmitted: false,
     reading: false,
     sync: true,
     needReadable: false,
     emittedReadable: true,
     readableListening: false,
     defaultEncoding: 'utf8',
     ranOut: false,
     awaitDrain: 0,
     readingMore: false,
     decoder: null,
     encoding: null },
  readable: true,
  domain: null,
  _events: {},
  _maxListeners: undefined,
  socket: 
   { _connecting: false,
     _hadError: false,
     _handle: 
      { fd: undefined,
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0 },
     _host: null,
     _readableState: 
      { objectMode: false,
        highWaterMark: 16384,
        buffer: [],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        defaultEncoding: 'utf8',
        ranOut: false,
        awaitDrain: 0,
        readingMore: true,
        decoder: null,
        encoding: null,
        resumeScheduled: false },
     readable: true,
     domain: null,
     _events: 
      { end: [Object],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Object],
        timeout: [Function],
        error: [Function: socketOnError],
        close: [Object],
        data: [Function: socketOnData] },
     _maxListeners: undefined,
     _writableState: 
      { objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false },
     writable: true,
     allowHalfOpen: true,
     destroyed: false,
     bytesRead: 208,
     _bytesDispatched: 0,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      { domain: null,
        _events: [Object],
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        _connectionKey: '4:null:0' },
     _idleTimeout: 120000,
     _idleNext: 
      { [Function: utcDate]
        _onTimeout: [Function],
        _idleTimeout: 181,
        _idleNext: [Object],
        _idlePrev: [Circular],
        _idleStart: 1035123 },
     _idlePrev: { _idleNext: [Circular], _idlePrev: [Object] },
     _idleStart: 1035153,
     parser: 
      { '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        _headers: [],
        _url: '',
        socket: [Circular],
        incoming: [Circular],
        maxHeaderPairs: 2000,
        onIncoming: [Function: parserOnIncoming] },
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: 
      { domain: null,
        _events: [Object],
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        writable: true,
        _last: false,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedHeader: {},
        _hasBody: true,
        _trailer: '',
        finished: false,
        _hangupClose: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _headers: [Object],
        _headerNames: [Object],
        req: [Circular],
        locals: {} } },
  connection: 
   { _connecting: false,
     _hadError: false,
     _handle: 
      { fd: undefined,
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0 },
     _host: null,
     _readableState: 
      { objectMode: false,
        highWaterMark: 16384,
        buffer: [],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        defaultEncoding: 'utf8',
        ranOut: false,
        awaitDrain: 0,
        readingMore: true,
        decoder: null,
        encoding: null,
        resumeScheduled: false },
     readable: true,
     domain: null,
     _events: 
      { end: [Object],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Object],
        timeout: [Function],
        error: [Function: socketOnError],
        close: [Object],
        data: [Function: socketOnData] },
     _maxListeners: undefined,
     _writableState: 
      { objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false },
     writable: true,
     allowHalfOpen: true,
     destroyed: false,
     bytesRead: 208,
     _bytesDispatched: 0,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      { domain: null,
        _events: [Object],
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        _connectionKey: '4:null:0' },
     _idleTimeout: 120000,
     _idleNext: 
      { [Function: utcDate]
        _onTimeout: [Function],
        _idleTimeout: 181,
        _idleNext: [Object],
        _idlePrev: [Circular],
        _idleStart: 1035123 },
     _idlePrev: { _idleNext: [Circular], _idlePrev: [Object] },
     _idleStart: 1035153,
     parser: 
      { '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        _headers: [],
        _url: '',
        socket: [Circular],
        incoming: [Circular],
        maxHeaderPairs: 2000,
        onIncoming: [Function: parserOnIncoming] },
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: 
      { domain: null,
        _events: [Object],
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        writable: true,
        _last: false,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedHeader: {},
        _hasBody: true,
        _trailer: '',
        finished: false,
        _hangupClose: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _headers: [Object],
        _headerNames: [Object],
        req: [Circular],
        locals: {} } },
  httpVersionMajor: 1,
  httpVersionMinor: 1,
  httpVersion: '1.1',
  complete: true,
  headers: 
   { host: '127.0.0.1:1350',
     'accept-encoding': 'gzip, deflate',
     'user-agent': 'node-superagent/0.21.0',
     authorization: 'OBHikrJt37vSuEGeOm39rRCAW2ObHdKsNv7Mz335EJUlHbEKIXHm5H1oNZFec3wa',
     connection: 'close' },
  rawHeaders: 
   [ 'Host',
     '127.0.0.1:1350',
     'Accept-Encoding',
     'gzip, deflate',
     'User-Agent',
     'node-superagent/0.21.0',
     'authorization',
     'OBHikrJt37vSuEGeOm39rRCAW2ObHdKsNv7Mz335EJUlHbEKIXHm5H1oNZFec3wa',
     'Connection',
     'close' ],
  trailers: {},
  rawTrailers: [],
  _pendings: [],
  _pendingIndex: 0,
  upgrade: false,
  url: '/',
  method: 'GET',
  statusCode: null,
  statusMessage: null,
  client: 
   { _connecting: false,
     _hadError: false,
     _handle: 
      { fd: undefined,
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0 },
     _host: null,
     _readableState: 
      { objectMode: false,
        highWaterMark: 16384,
        buffer: [],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        defaultEncoding: 'utf8',
        ranOut: false,
        awaitDrain: 0,
        readingMore: true,
        decoder: null,
        encoding: null,
        resumeScheduled: false },
     readable: true,
     domain: null,
     _events: 
      { end: [Object],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Object],
        timeout: [Function],
        error: [Function: socketOnError],
        close: [Object],
        data: [Function: socketOnData] },
     _maxListeners: undefined,
     _writableState: 
      { objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false },
     writable: true,
     allowHalfOpen: true,
     destroyed: false,
     bytesRead: 208,
     _bytesDispatched: 0,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      { domain: null,
        _events: [Object],
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        _connectionKey: '4:null:0' },
     _idleTimeout: 120000,
     _idleNext: 
      { [Function: utcDate]
        _onTimeout: [Function],
        _idleTimeout: 181,
        _idleNext: [Object],
        _idlePrev: [Circular],
        _idleStart: 1035123 },
     _idlePrev: { _idleNext: [Circular], _idlePrev: [Object] },
     _idleStart: 1035153,
     parser: 
      { '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        _headers: [],
        _url: '',
        socket: [Circular],
        incoming: [Circular],
        maxHeaderPairs: 2000,
        onIncoming: [Function: parserOnIncoming] },
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: 
      { domain: null,
        _events: [Object],
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        writable: true,
        _last: false,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedHeader: {},
        _hasBody: true,
        _trailer: '',
        finished: false,
        _hangupClose: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _headers: [Object],
        _headerNames: [Object],
        req: [Circular],
        locals: {} } },
  _consuming: false,
  _dumped: false,
  next: [Function: next],
  baseUrl: '',
  originalUrl: '/',
  _parsedUrl: 
   { protocol: null,
     slashes: null,
     auth: null,
     host: null,
     port: null,
     hostname: null,
     hash: null,
     search: null,
     query: null,
     pathname: '/',
     path: '/',
     href: '/',
     _raw: '/' },
  params: {},
  query: {},
  res: 
   { domain: null,
     _events: { prefinish: [Function: resOnFinish] },
     _maxListeners: undefined,
     output: [],
     outputEncodings: [],
     outputCallbacks: [],
     writable: true,
     _last: false,
     chunkedEncoding: false,
     shouldKeepAlive: false,
     useChunkedEncodingByDefault: true,
     sendDate: true,
     _removedHeader: {},
     _hasBody: true,
     _trailer: '',
     finished: false,
     _hangupClose: false,
     _headerSent: false,
     socket: 
      { _connecting: false,
        _hadError: false,
        _handle: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: true,
        destroyed: false,
        bytesRead: 208,
        _bytesDispatched: 0,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Object],
        _idleStart: 1035153,
        parser: [Object],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Circular] },
     connection: 
      { _connecting: false,
        _hadError: false,
        _handle: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: true,
        destroyed: false,
        bytesRead: 208,
        _bytesDispatched: 0,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Object],
        _idleStart: 1035153,
        parser: [Object],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Circular] },
     _header: null,
     _headers: { 'x-powered-by': 'Express' },
     _headerNames: { 'x-powered-by': 'X-Powered-By' },
     req: [Circular],
     locals: {} },
  accessToken: 
   { id: 'OBHikrJt37vSuEGeOm39rRCAW2ObHdKsNv7Mz335EJUlHbEKIXHm5H1oNZFec3wa',
     ttl: 1209600,
     created: Sat May 09 2015 16:01:53 GMT+0200 (Romance Daylight Time),
     userId: 123 },
  route: { path: '/', stack: [ [Object] ], methods: { get: true } } }

Sat, 09 May 2015 14:01:53 GMT api:loopback:middleware:token appGet token:
{ id: 'OBHikrJt37vSuEGeOm39rRCAW2ObHdKsNv7Mz335EJUlHbEKIXHm5H1oNZFec3wa',
  ttl: 1209600,
  created: Sat May 09 2015 16:01:53 GMT+0200 (Romance Daylight Time),
  userId: 123 }

        √ header, headers is empty, searchDefaultTokenKeys is true
      normal usage when not using options.searchDefaultTokenKeys
Sat, 09 May 2015 14:01:53 GMT api:loopback:middleware:token sendRequest get header tokenId expect:
/
authorization
J9aQ7YeUrDGfMP8vUByjcDF6LC4nibUhoRBECEsJzXC23QJWCA3NPyKHwPUWqvEN
200

Sat, 09 May 2015 14:01:53 GMT api:loopback:middleware:token appget tokenOptions:
{ searchDefaultTokenKeys: undefined,
  headers: [ 'authorization' ],
  model: 
   { [Function: ModelConstructor]
     setMaxListeners: [Function],
     emit: [Function],
     addListener: [Function],
     on: [Function],
     once: [Function],
     removeListener: [Function],
     removeAllListeners: [Function],
     listeners: [Function],
     super_: 
      { [Function: ModelConstructor]
        setMaxListeners: [Function],
        emit: [Function],
        addListener: [Function],
        on: [Function],
        once: [Function],
        removeListener: [Function],
        removeAllListeners: [Function],
        listeners: [Function],
        super_: [Object],
        defineProperty: [Function],
        getPropertyType: [Function],
        isProtectedProperty: [Function],
        isHiddenProperty: [Function],
        mixin: [Function],
        getDataSource: [Function],
        observe: [Function],
        removeObserver: [Function],
        clearObservers: [Function],
        notifyObserversOf: [Function],
        _notifyBaseObservers: [Function],
        afterInitialize: null,
        beforeValidate: null,
        afterValidate: null,
        beforeSave: null,
        afterSave: null,
        beforeCreate: null,
        afterCreate: null,
        beforeUpdate: null,
        afterUpdate: null,
        beforeDestroy: null,
        afterDestroy: null,
        validatesPresenceOf: [Function],
        validatesAbsenceOf: [Function],
        validatesLengthOf: [Function],
        validatesNumericalityOf: [Function],
        validatesInclusionOf: [Function],
        validatesExclusionOf: [Function],
        validatesFormatOf: [Function],
        validate: [Function],
        validateAsync: [Function],
        validatesUniquenessOf: [Function],
        getter: {},
        setter: {},
        definition: [Object],
        settings: [Object],
        forEachProperty: [Function],
        attachTo: [Function],
        extend: [Function],
        registerProperty: [Function],
        registry: [Object],
        setup: [Function: setupPersistedModel],
        _ACL: [Function: getACL],
        checkAccess: [Function],
        _getAccessTypeForMethod: [Function],
        getApp: [Function],
        remoteMethod: [Function],
        disableRemoteMethod: [Function],
        belongsToRemoting: [Function],
        hasOneRemoting: [Function],
        hasManyRemoting: [Function],
        scopeRemoting: [Function],
        nestRemoting: [Function],
        ValidationError: [Object],
        sharedClass: [Object],
        sharedCtor: [Object],
        beforeRemote: [Function],
        afterRemote: [Function],
        afterRemoteError: [Function],
        _runWhenAttachedToApp: [Function],
        create: [Object],
        updateOrCreate: [Object],
        upsert: [Object],
        findOrCreate: [Function: findOrCreate],
        exists: [Object],
        findById: [Object],
        find: [Object],
        findOne: [Object],
        destroyAll: [Object],
        remove: [Object],
        deleteAll: [Object],
        updateAll: [Object],
        update: [Object],
        destroyById: [Object],
        removeById: [Object],
        deleteById: [Object],
        count: [Object],
        getIdName: [Function],
        setupRemoting: [Function],
        diff: [Function],
        changes: [Function],
        checkpoint: [Function],
        currentCheckpoint: [Function],
        replicate: [Function],
        createUpdates: [Function],
        bulkUpdate: [Function],
        getChangeModel: [Function],
        getSourceId: [Function],
        enableChangeTracking: [Function],
        _defineChangeModel: [Function],
        rectifyAllChanges: [Function],
        handleChangeError: [Function],
        rectifyChange: [Function],
        findLastChange: [Function],
        updateLastChange: [Function],
        ANONYMOUS: [Object],
        createAccessTokenId: [Function],
        findForRequest: [Function],
        autoAttach: 'db',
        _mixins: [Object],
        _forDB: [Function],
        defaultScope: [Function],
        applyScope: [Function],
        applyProperties: [Function],
        lookupModel: [Function],
        findByIds: [Function],
        all: [Function],
        _normalize: [Function],
        _coerce: [Function],
        scope: [Function],
        normalizeInclude: [Function: normalizeInclude],
        include: [Function],
        hasMany: [Function: hasMany],
        belongsTo: [Function],
        hasAndBelongsToMany: [Function: hasAndBelongsToMany],
        hasOne: [Function: hasOne],
        referencesMany: [Function: referencesMany],
        embedsOne: [Function: embedsOne],
        embedsMany: [Function: embedsMany],
        _scopeMeta: {},
        shared: false,
        app: [Object] },
     defineProperty: [Function],
     getPropertyType: [Function],
     isProtectedProperty: [Function],
     isHiddenProperty: [Function],
     mixin: [Function],
     getDataSource: [Function],
     observe: [Function],
     removeObserver: [Function],
     clearObservers: [Function],
     notifyObserversOf: [Function],
     _notifyBaseObservers: [Function],
     afterInitialize: null,
     beforeValidate: null,
     afterValidate: null,
     beforeSave: null,
     afterSave: null,
     beforeCreate: null,
     afterCreate: null,
     beforeUpdate: null,
     afterUpdate: null,
     beforeDestroy: null,
     afterDestroy: null,
     validatesPresenceOf: [Function],
     validatesAbsenceOf: [Function],
     validatesLengthOf: [Function],
     validatesNumericalityOf: [Function],
     validatesInclusionOf: [Function],
     validatesExclusionOf: [Function],
     validatesFormatOf: [Function],
     validate: [Function],
     validateAsync: [Function],
     validatesUniquenessOf: [Function],
     getter: {},
     setter: {},
     definition: 
      { modelBuilder: [Object],
        name: 'MyToken',
        rawProperties: [Object],
        settings: [Object],
        relations: [],
        properties: [Object],
        _ids: [Object] },
     settings: 
      { strict: false,
        base: [Object],
        relations: [Object],
        acls: [Object] },
     forEachProperty: [Function],
     attachTo: [Function],
     extend: [Function],
     registerProperty: [Function],
     registry: 
      { defaultDataSources: [Object],
        modelBuilder: [Object],
        _memoryDataSources: [Object] },
     setup: [Function: setupPersistedModel],
     _ACL: [Function: getACL],
     checkAccess: [Function],
     _getAccessTypeForMethod: [Function],
     getApp: [Function],
     remoteMethod: [Function],
     disableRemoteMethod: [Function],
     belongsToRemoting: [Function],
     hasOneRemoting: [Function],
     hasManyRemoting: [Function],
     scopeRemoting: [Function],
     nestRemoting: [Function],
     ValidationError: { [Function: ValidationError] super_: [Object], maxPropertyStringLength: 32 },
     sharedClass: 
      { name: 'MyToken',
        ctor: [Circular],
        _methods: [Object],
        _resolvers: [Object],
        _disabledMethods: {},
        http: [Object],
        sharedCtor: [Object] },
     sharedCtor: { [Function] accepts: [Object], http: [Object], returns: [Object] },
     beforeRemote: [Function],
     afterRemote: [Function],
     afterRemoteError: [Function],
     _runWhenAttachedToApp: [Function],
     create: { [Function] _delegate: true },
     updateOrCreate: { [Function: upsert] _delegate: true },
     upsert: { [Function: upsert] _delegate: true },
     findOrCreate: [Function: findOrCreate],
     exists: { [Function: exists] _delegate: true },
     findById: { [Function: find] _delegate: true },
     find: { [Function: find] _delegate: true },
     findOne: { [Function: findOne] _delegate: true },
     destroyAll: { [Function: destroyAll] _delegate: true },
     remove: { [Function: destroyAll] _delegate: true },
     deleteAll: { [Function: destroyAll] _delegate: true },
     updateAll: { [Function] _delegate: true },
     update: { [Function] _delegate: true },
     destroyById: { [Function: deleteById] _delegate: true },
     removeById: { [Function: deleteById] _delegate: true },
     deleteById: { [Function: deleteById] _delegate: true },
     count: { [Function] _delegate: true },
     getIdName: [Function],
     setupRemoting: [Function],
     diff: [Function],
     changes: [Function],
     checkpoint: [Function],
     currentCheckpoint: [Function],
     replicate: [Function],
     createUpdates: [Function],
     bulkUpdate: [Function],
     getChangeModel: [Function],
     getSourceId: [Function],
     enableChangeTracking: [Function],
     _defineChangeModel: [Function],
     rectifyAllChanges: [Function],
     handleChangeError: [Function],
     rectifyChange: [Function],
     findLastChange: [Function],
     updateLastChange: [Function],
     ANONYMOUS: 
      { id: '$anonymous',
        created: Sat May 09 2015 16:01:53 GMT+0200 (Romance Daylight Time),
        ttl: 1209600 },
     createAccessTokenId: [Function],
     findForRequest: [Function],
     autoAttach: 'db',
     _forDB: [Function],
     defaultScope: [Function],
     applyScope: [Function],
     applyProperties: [Function],
     lookupModel: [Function],
     findByIds: [Function],
     all: [Function],
     _normalize: [Function],
     _coerce: [Function],
     scope: [Function],
     normalizeInclude: [Function: normalizeInclude],
     include: [Function],
     hasMany: [Function: hasMany],
     belongsTo: [Function],
     hasAndBelongsToMany: [Function: hasAndBelongsToMany],
     hasOne: [Function: hasOne],
     referencesMany: [Function: referencesMany],
     embedsOne: [Function: embedsOne],
     embedsMany: [Function: embedsMany],
     _scopeMeta: {},
     shared: false,
     app: 
      { [Function]
        domain: undefined,
        _events: [Object],
        _maxListeners: undefined,
        setMaxListeners: [Function: setMaxListeners],
        emit: [Function: emit],
        addListener: [Function: addListener],
        on: [Function: addListener],
        once: [Function: once],
        removeListener: [Function: removeListener],
        removeAllListeners: [Function: removeAllListeners],
        listeners: [Function: listeners],
        init: [Function],
        defaultConfiguration: [Function],
        lazyrouter: [Function],
        handle: [Function],
        use: [Function: use],
        route: [Function],
        engine: [Function],
        param: [Function],
        set: [Function],
        path: [Function],
        enabled: [Function],
        disabled: [Function],
        enable: [Function],
        disable: [Function],
        checkout: [Function],
        connect: [Function],
        copy: [Function],
        delete: [Function],
        get: [Function],
        head: [Function],
        lock: [Function],
        'm-search': [Function],
        merge: [Function],
        mkactivity: [Function],
        mkcol: [Function],
        move: [Function],
        notify: [Function],
        options: [Function],
        patch: [Function],
        post: [Function],
        propfind: [Function],
        proppatch: [Function],
        purge: [Function],
        put: [Function],
        report: [Function],
        search: [Function],
        subscribe: [Function],
        trace: [Function],
        unlock: [Function],
        unsubscribe: [Function],
        all: [Function],
        del: [Function],
        render: [Function],
        listen: [Function],
        request: [Object],
        response: [Object],
        cache: {},
        settings: [Object],
        engines: {},
        locals: [Object],
        mountpath: '/',
        __expressLazyRouter: [Function],
        _sortLayersByPhase: [Function],
        _findLayerByHandler: [Function],
        middleware: [Function],
        defineMiddlewarePhases: [Function],
        middlewareFromConfig: [Function],
        boot: [Function],
        enableAuth: [Function],
        dataSources: [Object],
        datasources: [Object],
        handler: [Function],
        remoteObjects: [Function],
        connector: [Function],
        dataSource: [Function],
        models: [Object],
        model: [Function],
        disuse: [Function],
        remotes: [Function],
        loopback: [Object],
        connectors: [Object],
        registry: [Object],
        _remotes: [Object],
        isAuthEnabled: true,
        booting: false,
        _models: [Object],
        _handlers: undefined,
        _router: [Object],
        _requestHandlingPhases: [Object] },
     _mixins: [ [Object], [Object], [Object] ] },
  currentUserLiteral: 'me' }

Sat, 09 May 2015 14:01:53 GMT api:loopback:middleware:token appget req:
{ _readableState: 
   { objectMode: false,
     highWaterMark: 16384,
     buffer: [],
     length: 0,
     pipes: null,
     pipesCount: 0,
     flowing: null,
     ended: true,
     endEmitted: false,
     reading: false,
     sync: true,
     needReadable: false,
     emittedReadable: true,
     readableListening: false,
     defaultEncoding: 'utf8',
     ranOut: false,
     awaitDrain: 0,
     readingMore: false,
     decoder: null,
     encoding: null },
  readable: true,
  domain: null,
  _events: {},
  _maxListeners: undefined,
  socket: 
   { _connecting: false,
     _hadError: false,
     _handle: 
      { fd: undefined,
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0 },
     _host: null,
     _readableState: 
      { objectMode: false,
        highWaterMark: 16384,
        buffer: [],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        defaultEncoding: 'utf8',
        ranOut: false,
        awaitDrain: 0,
        readingMore: true,
        decoder: null,
        encoding: null,
        resumeScheduled: false },
     readable: true,
     domain: null,
     _events: 
      { end: [Object],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Object],
        timeout: [Function],
        error: [Function: socketOnError],
        close: [Object],
        data: [Function: socketOnData] },
     _maxListeners: undefined,
     _writableState: 
      { objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false },
     writable: true,
     allowHalfOpen: true,
     destroyed: false,
     bytesRead: 208,
     _bytesDispatched: 0,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      { domain: null,
        _events: [Object],
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        _connectionKey: '4:null:0' },
     _idleTimeout: 120000,
     _idleNext: 
      { [Function: utcDate]
        _onTimeout: [Function],
        _idleTimeout: 181,
        _idleNext: [Object],
        _idlePrev: [Circular],
        _idleStart: 1035123 },
     _idlePrev: { _idleNext: [Circular], _idlePrev: [Object] },
     _idleStart: 1035166,
     parser: 
      { '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        _headers: [],
        _url: '',
        socket: [Circular],
        incoming: [Circular],
        maxHeaderPairs: 2000,
        onIncoming: [Function: parserOnIncoming] },
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: 
      { domain: null,
        _events: [Object],
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        writable: true,
        _last: false,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedHeader: {},
        _hasBody: true,
        _trailer: '',
        finished: false,
        _hangupClose: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _headers: [Object],
        _headerNames: [Object],
        req: [Circular],
        locals: {} } },
  connection: 
   { _connecting: false,
     _hadError: false,
     _handle: 
      { fd: undefined,
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0 },
     _host: null,
     _readableState: 
      { objectMode: false,
        highWaterMark: 16384,
        buffer: [],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        defaultEncoding: 'utf8',
        ranOut: false,
        awaitDrain: 0,
        readingMore: true,
        decoder: null,
        encoding: null,
        resumeScheduled: false },
     readable: true,
     domain: null,
     _events: 
      { end: [Object],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Object],
        timeout: [Function],
        error: [Function: socketOnError],
        close: [Object],
        data: [Function: socketOnData] },
     _maxListeners: undefined,
     _writableState: 
      { objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false },
     writable: true,
     allowHalfOpen: true,
     destroyed: false,
     bytesRead: 208,
     _bytesDispatched: 0,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      { domain: null,
        _events: [Object],
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        _connectionKey: '4:null:0' },
     _idleTimeout: 120000,
     _idleNext: 
      { [Function: utcDate]
        _onTimeout: [Function],
        _idleTimeout: 181,
        _idleNext: [Object],
        _idlePrev: [Circular],
        _idleStart: 1035123 },
     _idlePrev: { _idleNext: [Circular], _idlePrev: [Object] },
     _idleStart: 1035166,
     parser: 
      { '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        _headers: [],
        _url: '',
        socket: [Circular],
        incoming: [Circular],
        maxHeaderPairs: 2000,
        onIncoming: [Function: parserOnIncoming] },
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: 
      { domain: null,
        _events: [Object],
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        writable: true,
        _last: false,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedHeader: {},
        _hasBody: true,
        _trailer: '',
        finished: false,
        _hangupClose: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _headers: [Object],
        _headerNames: [Object],
        req: [Circular],
        locals: {} } },
  httpVersionMajor: 1,
  httpVersionMinor: 1,
  httpVersion: '1.1',
  complete: true,
  headers: 
   { host: '127.0.0.1:1352',
     'accept-encoding': 'gzip, deflate',
     'user-agent': 'node-superagent/0.21.0',
     authorization: 'J9aQ7YeUrDGfMP8vUByjcDF6LC4nibUhoRBECEsJzXC23QJWCA3NPyKHwPUWqvEN',
     connection: 'close' },
  rawHeaders: 
   [ 'Host',
     '127.0.0.1:1352',
     'Accept-Encoding',
     'gzip, deflate',
     'User-Agent',
     'node-superagent/0.21.0',
     'authorization',
     'J9aQ7YeUrDGfMP8vUByjcDF6LC4nibUhoRBECEsJzXC23QJWCA3NPyKHwPUWqvEN',
     'Connection',
     'close' ],
  trailers: {},
  rawTrailers: [],
  _pendings: [],
  _pendingIndex: 0,
  upgrade: false,
  url: '/',
  method: 'GET',
  statusCode: null,
  statusMessage: null,
  client: 
   { _connecting: false,
     _hadError: false,
     _handle: 
      { fd: undefined,
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0 },
     _host: null,
     _readableState: 
      { objectMode: false,
        highWaterMark: 16384,
        buffer: [],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        defaultEncoding: 'utf8',
        ranOut: false,
        awaitDrain: 0,
        readingMore: true,
        decoder: null,
        encoding: null,
        resumeScheduled: false },
     readable: true,
     domain: null,
     _events: 
      { end: [Object],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Object],
        timeout: [Function],
        error: [Function: socketOnError],
        close: [Object],
        data: [Function: socketOnData] },
     _maxListeners: undefined,
     _writableState: 
      { objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false },
     writable: true,
     allowHalfOpen: true,
     destroyed: false,
     bytesRead: 208,
     _bytesDispatched: 0,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      { domain: null,
        _events: [Object],
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        _connectionKey: '4:null:0' },
     _idleTimeout: 120000,
     _idleNext: 
      { [Function: utcDate]
        _onTimeout: [Function],
        _idleTimeout: 181,
        _idleNext: [Object],
        _idlePrev: [Circular],
        _idleStart: 1035123 },
     _idlePrev: { _idleNext: [Circular], _idlePrev: [Object] },
     _idleStart: 1035166,
     parser: 
      { '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        _headers: [],
        _url: '',
        socket: [Circular],
        incoming: [Circular],
        maxHeaderPairs: 2000,
        onIncoming: [Function: parserOnIncoming] },
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: 
      { domain: null,
        _events: [Object],
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        writable: true,
        _last: false,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedHeader: {},
        _hasBody: true,
        _trailer: '',
        finished: false,
        _hangupClose: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _headers: [Object],
        _headerNames: [Object],
        req: [Circular],
        locals: {} } },
  _consuming: false,
  _dumped: false,
  next: [Function: next],
  baseUrl: '',
  originalUrl: '/',
  _parsedUrl: 
   { protocol: null,
     slashes: null,
     auth: null,
     host: null,
     port: null,
     hostname: null,
     hash: null,
     search: null,
     query: null,
     pathname: '/',
     path: '/',
     href: '/',
     _raw: '/' },
  params: {},
  query: {},
  res: 
   { domain: null,
     _events: { prefinish: [Function: resOnFinish] },
     _maxListeners: undefined,
     output: [],
     outputEncodings: [],
     outputCallbacks: [],
     writable: true,
     _last: false,
     chunkedEncoding: false,
     shouldKeepAlive: false,
     useChunkedEncodingByDefault: true,
     sendDate: true,
     _removedHeader: {},
     _hasBody: true,
     _trailer: '',
     finished: false,
     _hangupClose: false,
     _headerSent: false,
     socket: 
      { _connecting: false,
        _hadError: false,
        _handle: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: true,
        destroyed: false,
        bytesRead: 208,
        _bytesDispatched: 0,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Object],
        _idleStart: 1035166,
        parser: [Object],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Circular] },
     connection: 
      { _connecting: false,
        _hadError: false,
        _handle: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: true,
        destroyed: false,
        bytesRead: 208,
        _bytesDispatched: 0,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Object],
        _idleStart: 1035166,
        parser: [Object],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Circular] },
     _header: null,
     _headers: { 'x-powered-by': 'Express' },
     _headerNames: { 'x-powered-by': 'X-Powered-By' },
     req: [Circular],
     locals: {} },
  accessToken: 
   { id: 'J9aQ7YeUrDGfMP8vUByjcDF6LC4nibUhoRBECEsJzXC23QJWCA3NPyKHwPUWqvEN',
     ttl: 1209600,
     created: Sat May 09 2015 16:01:53 GMT+0200 (Romance Daylight Time),
     userId: 123 },
  route: { path: '/', stack: [ [Object] ], methods: { get: true } } }

Sat, 09 May 2015 14:01:53 GMT api:loopback:middleware:token appGet token:
{ id: 'J9aQ7YeUrDGfMP8vUByjcDF6LC4nibUhoRBECEsJzXC23QJWCA3NPyKHwPUWqvEN',
  ttl: 1209600,
  created: Sat May 09 2015 16:01:53 GMT+0200 (Romance Daylight Time),
  userId: 123 }

        √ header, headers is empty, searchDefaultTokenKeys is undefined
      unnormal usage: for testing purposes, or other strange usages
        BUG: AccessToken.findForRequest FIXME for cb() expect 500 for now
Sat, 09 May 2015 14:01:53 GMT loopback:middleware:token token FIXME: check that there is a definition for a Token Key, otherwise Warn?
Sat, 09 May 2015 14:01:53 GMT api:loopback:middleware:token sendRequest get header tokenId expect:
/
authorization
0UhvXKDSJICs5riBR0EUWbZNaqiq8dCE32AeSuogDXI7PDpuVtBAEY9zd2abjnAM
500

Sat, 09 May 2015 14:01:53 GMT api:loopback:middleware:token appget tokenOptions:
{ searchDefaultTokenKeys: false,
  headers: [],
  model: 
   { [Function: ModelConstructor]
     setMaxListeners: [Function],
     emit: [Function],
     addListener: [Function],
     on: [Function],
     once: [Function],
     removeListener: [Function],
     removeAllListeners: [Function],
     listeners: [Function],
     super_: 
      { [Function: ModelConstructor]
        setMaxListeners: [Function],
        emit: [Function],
        addListener: [Function],
        on: [Function],
        once: [Function],
        removeListener: [Function],
        removeAllListeners: [Function],
        listeners: [Function],
        super_: [Object],
        defineProperty: [Function],
        getPropertyType: [Function],
        isProtectedProperty: [Function],
        isHiddenProperty: [Function],
        mixin: [Function],
        getDataSource: [Function],
        observe: [Function],
        removeObserver: [Function],
        clearObservers: [Function],
        notifyObserversOf: [Function],
        _notifyBaseObservers: [Function],
        afterInitialize: null,
        beforeValidate: null,
        afterValidate: null,
        beforeSave: null,
        afterSave: null,
        beforeCreate: null,
        afterCreate: null,
        beforeUpdate: null,
        afterUpdate: null,
        beforeDestroy: null,
        afterDestroy: null,
        validatesPresenceOf: [Function],
        validatesAbsenceOf: [Function],
        validatesLengthOf: [Function],
        validatesNumericalityOf: [Function],
        validatesInclusionOf: [Function],
        validatesExclusionOf: [Function],
        validatesFormatOf: [Function],
        validate: [Function],
        validateAsync: [Function],
        validatesUniquenessOf: [Function],
        getter: {},
        setter: {},
        definition: [Object],
        settings: [Object],
        forEachProperty: [Function],
        attachTo: [Function],
        extend: [Function],
        registerProperty: [Function],
        registry: [Object],
        setup: [Function: setupPersistedModel],
        _ACL: [Function: getACL],
        checkAccess: [Function],
        _getAccessTypeForMethod: [Function],
        getApp: [Function],
        remoteMethod: [Function],
        disableRemoteMethod: [Function],
        belongsToRemoting: [Function],
        hasOneRemoting: [Function],
        hasManyRemoting: [Function],
        scopeRemoting: [Function],
        nestRemoting: [Function],
        ValidationError: [Object],
        sharedClass: [Object],
        sharedCtor: [Object],
        beforeRemote: [Function],
        afterRemote: [Function],
        afterRemoteError: [Function],
        _runWhenAttachedToApp: [Function],
        create: [Object],
        updateOrCreate: [Object],
        upsert: [Object],
        findOrCreate: [Function: findOrCreate],
        exists: [Object],
        findById: [Object],
        find: [Object],
        findOne: [Object],
        destroyAll: [Object],
        remove: [Object],
        deleteAll: [Object],
        updateAll: [Object],
        update: [Object],
        destroyById: [Object],
        removeById: [Object],
        deleteById: [Object],
        count: [Object],
        getIdName: [Function],
        setupRemoting: [Function],
        diff: [Function],
        changes: [Function],
        checkpoint: [Function],
        currentCheckpoint: [Function],
        replicate: [Function],
        createUpdates: [Function],
        bulkUpdate: [Function],
        getChangeModel: [Function],
        getSourceId: [Function],
        enableChangeTracking: [Function],
        _defineChangeModel: [Function],
        rectifyAllChanges: [Function],
        handleChangeError: [Function],
        rectifyChange: [Function],
        findLastChange: [Function],
        updateLastChange: [Function],
        ANONYMOUS: [Object],
        createAccessTokenId: [Function],
        findForRequest: [Function],
        autoAttach: 'db',
        _mixins: [Object],
        _forDB: [Function],
        defaultScope: [Function],
        applyScope: [Function],
        applyProperties: [Function],
        lookupModel: [Function],
        findByIds: [Function],
        all: [Function],
        _normalize: [Function],
        _coerce: [Function],
        scope: [Function],
        normalizeInclude: [Function: normalizeInclude],
        include: [Function],
        hasMany: [Function: hasMany],
        belongsTo: [Function],
        hasAndBelongsToMany: [Function: hasAndBelongsToMany],
        hasOne: [Function: hasOne],
        referencesMany: [Function: referencesMany],
        embedsOne: [Function: embedsOne],
        embedsMany: [Function: embedsMany],
        _scopeMeta: {},
        shared: false,
        app: [Object] },
     defineProperty: [Function],
     getPropertyType: [Function],
     isProtectedProperty: [Function],
     isHiddenProperty: [Function],
     mixin: [Function],
     getDataSource: [Function],
     observe: [Function],
     removeObserver: [Function],
     clearObservers: [Function],
     notifyObserversOf: [Function],
     _notifyBaseObservers: [Function],
     afterInitialize: null,
     beforeValidate: null,
     afterValidate: null,
     beforeSave: null,
     afterSave: null,
     beforeCreate: null,
     afterCreate: null,
     beforeUpdate: null,
     afterUpdate: null,
     beforeDestroy: null,
     afterDestroy: null,
     validatesPresenceOf: [Function],
     validatesAbsenceOf: [Function],
     validatesLengthOf: [Function],
     validatesNumericalityOf: [Function],
     validatesInclusionOf: [Function],
     validatesExclusionOf: [Function],
     validatesFormatOf: [Function],
     validate: [Function],
     validateAsync: [Function],
     validatesUniquenessOf: [Function],
     getter: {},
     setter: {},
     definition: 
      { modelBuilder: [Object],
        name: 'MyToken',
        rawProperties: [Object],
        settings: [Object],
        relations: [],
        properties: [Object],
        _ids: [Object] },
     settings: 
      { strict: false,
        base: [Object],
        relations: [Object],
        acls: [Object] },
     forEachProperty: [Function],
     attachTo: [Function],
     extend: [Function],
     registerProperty: [Function],
     registry: 
      { defaultDataSources: [Object],
        modelBuilder: [Object],
        _memoryDataSources: [Object] },
     setup: [Function: setupPersistedModel],
     _ACL: [Function: getACL],
     checkAccess: [Function],
     _getAccessTypeForMethod: [Function],
     getApp: [Function],
     remoteMethod: [Function],
     disableRemoteMethod: [Function],
     belongsToRemoting: [Function],
     hasOneRemoting: [Function],
     hasManyRemoting: [Function],
     scopeRemoting: [Function],
     nestRemoting: [Function],
     ValidationError: { [Function: ValidationError] super_: [Object], maxPropertyStringLength: 32 },
     sharedClass: 
      { name: 'MyToken',
        ctor: [Circular],
        _methods: [Object],
        _resolvers: [Object],
        _disabledMethods: {},
        http: [Object],
        sharedCtor: [Object] },
     sharedCtor: { [Function] accepts: [Object], http: [Object], returns: [Object] },
     beforeRemote: [Function],
     afterRemote: [Function],
     afterRemoteError: [Function],
     _runWhenAttachedToApp: [Function],
     create: { [Function] _delegate: true },
     updateOrCreate: { [Function: upsert] _delegate: true },
     upsert: { [Function: upsert] _delegate: true },
     findOrCreate: [Function: findOrCreate],
     exists: { [Function: exists] _delegate: true },
     findById: { [Function: find] _delegate: true },
     find: { [Function: find] _delegate: true },
     findOne: { [Function: findOne] _delegate: true },
     destroyAll: { [Function: destroyAll] _delegate: true },
     remove: { [Function: destroyAll] _delegate: true },
     deleteAll: { [Function: destroyAll] _delegate: true },
     updateAll: { [Function] _delegate: true },
     update: { [Function] _delegate: true },
     destroyById: { [Function: deleteById] _delegate: true },
     removeById: { [Function: deleteById] _delegate: true },
     deleteById: { [Function: deleteById] _delegate: true },
     count: { [Function] _delegate: true },
     getIdName: [Function],
     setupRemoting: [Function],
     diff: [Function],
     changes: [Function],
     checkpoint: [Function],
     currentCheckpoint: [Function],
     replicate: [Function],
     createUpdates: [Function],
     bulkUpdate: [Function],
     getChangeModel: [Function],
     getSourceId: [Function],
     enableChangeTracking: [Function],
     _defineChangeModel: [Function],
     rectifyAllChanges: [Function],
     handleChangeError: [Function],
     rectifyChange: [Function],
     findLastChange: [Function],
     updateLastChange: [Function],
     ANONYMOUS: 
      { id: '$anonymous',
        created: Sat May 09 2015 16:01:53 GMT+0200 (Romance Daylight Time),
        ttl: 1209600 },
     createAccessTokenId: [Function],
     findForRequest: [Function],
     autoAttach: 'db',
     _forDB: [Function],
     defaultScope: [Function],
     applyScope: [Function],
     applyProperties: [Function],
     lookupModel: [Function],
     findByIds: [Function],
     all: [Function],
     _normalize: [Function],
     _coerce: [Function],
     scope: [Function],
     normalizeInclude: [Function: normalizeInclude],
     include: [Function],
     hasMany: [Function: hasMany],
     belongsTo: [Function],
     hasAndBelongsToMany: [Function: hasAndBelongsToMany],
     hasOne: [Function: hasOne],
     referencesMany: [Function: referencesMany],
     embedsOne: [Function: embedsOne],
     embedsMany: [Function: embedsMany],
     _scopeMeta: {},
     shared: false,
     app: 
      { [Function]
        domain: undefined,
        _events: [Object],
        _maxListeners: undefined,
        setMaxListeners: [Function: setMaxListeners],
        emit: [Function: emit],
        addListener: [Function: addListener],
        on: [Function: addListener],
        once: [Function: once],
        removeListener: [Function: removeListener],
        removeAllListeners: [Function: removeAllListeners],
        listeners: [Function: listeners],
        init: [Function],
        defaultConfiguration: [Function],
        lazyrouter: [Function],
        handle: [Function],
        use: [Function: use],
        route: [Function],
        engine: [Function],
        param: [Function],
        set: [Function],
        path: [Function],
        enabled: [Function],
        disabled: [Function],
        enable: [Function],
        disable: [Function],
        checkout: [Function],
        connect: [Function],
        copy: [Function],
        delete: [Function],
        get: [Function],
        head: [Function],
        lock: [Function],
        'm-search': [Function],
        merge: [Function],
        mkactivity: [Function],
        mkcol: [Function],
        move: [Function],
        notify: [Function],
        options: [Function],
        patch: [Function],
        post: [Function],
        propfind: [Function],
        proppatch: [Function],
        purge: [Function],
        put: [Function],
        report: [Function],
        search: [Function],
        subscribe: [Function],
        trace: [Function],
        unlock: [Function],
        unsubscribe: [Function],
        all: [Function],
        del: [Function],
        render: [Function],
        listen: [Function],
        request: [Object],
        response: [Object],
        cache: {},
        settings: [Object],
        engines: {},
        locals: [Object],
        mountpath: '/',
        __expressLazyRouter: [Function],
        _sortLayersByPhase: [Function],
        _findLayerByHandler: [Function],
        middleware: [Function],
        defineMiddlewarePhases: [Function],
        middlewareFromConfig: [Function],
        boot: [Function],
        enableAuth: [Function],
        dataSources: [Object],
        datasources: [Object],
        handler: [Function],
        remoteObjects: [Function],
        connector: [Function],
        dataSource: [Function],
        models: [Object],
        model: [Function],
        disuse: [Function],
        remotes: [Function],
        loopback: [Object],
        connectors: [Object],
        registry: [Object],
        _remotes: [Object],
        isAuthEnabled: true,
        booting: false,
        _models: [Object],
        _handlers: undefined,
        _router: [Object],
        _requestHandlingPhases: [Object] },
     _mixins: [ [Object], [Object], [Object] ] },
  currentUserLiteral: 'me' }

Sat, 09 May 2015 14:01:53 GMT api:loopback:middleware:token appget req:
{ _readableState: 
   { objectMode: false,
     highWaterMark: 16384,
     buffer: [],
     length: 0,
     pipes: null,
     pipesCount: 0,
     flowing: null,
     ended: true,
     endEmitted: false,
     reading: false,
     sync: true,
     needReadable: false,
     emittedReadable: true,
     readableListening: false,
     defaultEncoding: 'utf8',
     ranOut: false,
     awaitDrain: 0,
     readingMore: false,
     decoder: null,
     encoding: null },
  readable: true,
  domain: null,
  _events: {},
  _maxListeners: undefined,
  socket: 
   { _connecting: false,
     _hadError: false,
     _handle: 
      { fd: undefined,
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0 },
     _host: null,
     _readableState: 
      { objectMode: false,
        highWaterMark: 16384,
        buffer: [],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        defaultEncoding: 'utf8',
        ranOut: false,
        awaitDrain: 0,
        readingMore: true,
        decoder: null,
        encoding: null,
        resumeScheduled: false },
     readable: true,
     domain: null,
     _events: 
      { end: [Object],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Object],
        timeout: [Function],
        error: [Function: socketOnError],
        close: [Object],
        data: [Function: socketOnData] },
     _maxListeners: undefined,
     _writableState: 
      { objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false },
     writable: true,
     allowHalfOpen: true,
     destroyed: false,
     bytesRead: 208,
     _bytesDispatched: 0,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      { domain: null,
        _events: [Object],
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        _connectionKey: '4:null:0' },
     _idleTimeout: 120000,
     _idleNext: 
      { [Function: utcDate]
        _onTimeout: [Function],
        _idleTimeout: 181,
        _idleNext: [Object],
        _idlePrev: [Circular],
        _idleStart: 1035123 },
     _idlePrev: { _idleNext: [Circular], _idlePrev: [Object] },
     _idleStart: 1035179,
     parser: 
      { '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        _headers: [],
        _url: '',
        socket: [Circular],
        incoming: [Circular],
        maxHeaderPairs: 2000,
        onIncoming: [Function: parserOnIncoming] },
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: 
      { domain: null,
        _events: [Object],
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        writable: true,
        _last: false,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedHeader: {},
        _hasBody: true,
        _trailer: '',
        finished: false,
        _hangupClose: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _headers: [Object],
        _headerNames: [Object],
        req: [Circular],
        locals: {} } },
  connection: 
   { _connecting: false,
     _hadError: false,
     _handle: 
      { fd: undefined,
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0 },
     _host: null,
     _readableState: 
      { objectMode: false,
        highWaterMark: 16384,
        buffer: [],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        defaultEncoding: 'utf8',
        ranOut: false,
        awaitDrain: 0,
        readingMore: true,
        decoder: null,
        encoding: null,
        resumeScheduled: false },
     readable: true,
     domain: null,
     _events: 
      { end: [Object],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Object],
        timeout: [Function],
        error: [Function: socketOnError],
        close: [Object],
        data: [Function: socketOnData] },
     _maxListeners: undefined,
     _writableState: 
      { objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false },
     writable: true,
     allowHalfOpen: true,
     destroyed: false,
     bytesRead: 208,
     _bytesDispatched: 0,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      { domain: null,
        _events: [Object],
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        _connectionKey: '4:null:0' },
     _idleTimeout: 120000,
     _idleNext: 
      { [Function: utcDate]
        _onTimeout: [Function],
        _idleTimeout: 181,
        _idleNext: [Object],
        _idlePrev: [Circular],
        _idleStart: 1035123 },
     _idlePrev: { _idleNext: [Circular], _idlePrev: [Object] },
     _idleStart: 1035179,
     parser: 
      { '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        _headers: [],
        _url: '',
        socket: [Circular],
        incoming: [Circular],
        maxHeaderPairs: 2000,
        onIncoming: [Function: parserOnIncoming] },
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: 
      { domain: null,
        _events: [Object],
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        writable: true,
        _last: false,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedHeader: {},
        _hasBody: true,
        _trailer: '',
        finished: false,
        _hangupClose: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _headers: [Object],
        _headerNames: [Object],
        req: [Circular],
        locals: {} } },
  httpVersionMajor: 1,
  httpVersionMinor: 1,
  httpVersion: '1.1',
  complete: true,
  headers: 
   { host: '127.0.0.1:1354',
     'accept-encoding': 'gzip, deflate',
     'user-agent': 'node-superagent/0.21.0',
     authorization: '0UhvXKDSJICs5riBR0EUWbZNaqiq8dCE32AeSuogDXI7PDpuVtBAEY9zd2abjnAM',
     connection: 'close' },
  rawHeaders: 
   [ 'Host',
     '127.0.0.1:1354',
     'Accept-Encoding',
     'gzip, deflate',
     'User-Agent',
     'node-superagent/0.21.0',
     'authorization',
     '0UhvXKDSJICs5riBR0EUWbZNaqiq8dCE32AeSuogDXI7PDpuVtBAEY9zd2abjnAM',
     'Connection',
     'close' ],
  trailers: {},
  rawTrailers: [],
  _pendings: [],
  _pendingIndex: 0,
  upgrade: false,
  url: '/',
  method: 'GET',
  statusCode: null,
  statusMessage: null,
  client: 
   { _connecting: false,
     _hadError: false,
     _handle: 
      { fd: undefined,
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0 },
     _host: null,
     _readableState: 
      { objectMode: false,
        highWaterMark: 16384,
        buffer: [],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        defaultEncoding: 'utf8',
        ranOut: false,
        awaitDrain: 0,
        readingMore: true,
        decoder: null,
        encoding: null,
        resumeScheduled: false },
     readable: true,
     domain: null,
     _events: 
      { end: [Object],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Object],
        timeout: [Function],
        error: [Function: socketOnError],
        close: [Object],
        data: [Function: socketOnData] },
     _maxListeners: undefined,
     _writableState: 
      { objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false },
     writable: true,
     allowHalfOpen: true,
     destroyed: false,
     bytesRead: 208,
     _bytesDispatched: 0,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      { domain: null,
        _events: [Object],
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        _connectionKey: '4:null:0' },
     _idleTimeout: 120000,
     _idleNext: 
      { [Function: utcDate]
        _onTimeout: [Function],
        _idleTimeout: 181,
        _idleNext: [Object],
        _idlePrev: [Circular],
        _idleStart: 1035123 },
     _idlePrev: { _idleNext: [Circular], _idlePrev: [Object] },
     _idleStart: 1035179,
     parser: 
      { '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        _headers: [],
        _url: '',
        socket: [Circular],
        incoming: [Circular],
        maxHeaderPairs: 2000,
        onIncoming: [Function: parserOnIncoming] },
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: 
      { domain: null,
        _events: [Object],
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        writable: true,
        _last: false,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedHeader: {},
        _hasBody: true,
        _trailer: '',
        finished: false,
        _hangupClose: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _headers: [Object],
        _headerNames: [Object],
        req: [Circular],
        locals: {} } },
  _consuming: false,
  _dumped: false,
  next: [Function: next],
  baseUrl: '',
  originalUrl: '/',
  _parsedUrl: 
   { protocol: null,
     slashes: null,
     auth: null,
     host: null,
     port: null,
     hostname: null,
     hash: null,
     search: null,
     query: null,
     pathname: '/',
     path: '/',
     href: '/',
     _raw: '/' },
  params: {},
  query: {},
  res: 
   { domain: null,
     _events: { prefinish: [Function: resOnFinish] },
     _maxListeners: undefined,
     output: [],
     outputEncodings: [],
     outputCallbacks: [],
     writable: true,
     _last: false,
     chunkedEncoding: false,
     shouldKeepAlive: false,
     useChunkedEncodingByDefault: true,
     sendDate: true,
     _removedHeader: {},
     _hasBody: true,
     _trailer: '',
     finished: false,
     _hangupClose: false,
     _headerSent: false,
     socket: 
      { _connecting: false,
        _hadError: false,
        _handle: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: true,
        destroyed: false,
        bytesRead: 208,
        _bytesDispatched: 0,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Object],
        _idleStart: 1035179,
        parser: [Object],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Circular] },
     connection: 
      { _connecting: false,
        _hadError: false,
        _handle: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: true,
        destroyed: false,
        bytesRead: 208,
        _bytesDispatched: 0,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Object],
        _idleStart: 1035179,
        parser: [Object],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Circular] },
     _header: null,
     _headers: { 'x-powered-by': 'Express' },
     _headerNames: { 'x-powered-by': 'X-Powered-By' },
     req: [Circular],
     locals: {} },
  accessToken: null,
  route: { path: '/', stack: [ [Object] ], methods: { get: true } } }

Sat, 09 May 2015 14:01:53 GMT api:loopback:middleware:token appGet token:
FIXME ???? ERROR ????

          √ header, headers is empty, searchDefaultTokenKeys is false

  User
    User.login
      √ Login a user using a custom createAccessToken
      √ Login a user using a custom createAccessToken with options
    ctor
      √ exports default AccessToken model


  12 passing (172ms)

