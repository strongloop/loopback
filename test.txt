

  AccessToken
    √ should auto-generate id
    √ should auto-generate created date
    √ should be validateable
    .findForRequest()
      √ supports two-arg variant with no options

  AccessToken api:loopback:middleware:token(options)
    loopback.token({})
      - header authorization
    options.searchDefaultTokenKeys:[true|false]
      normal usage for options.searchDefaultTokenKeys
Sat, 09 May 2015 08:14:37 GMT api:loopback:middleware:token optionsUndefined searchDefaultTokenKeys:
{ expect: 200, header: 'authorization', done: [Function] }

Sat, 09 May 2015 08:14:37 GMT loopback:middleware:token FIXME: check that there is a definition for a Token Key, otherwise Warn?
Sat, 09 May 2015 08:14:37 GMT api:loopback:middleware:token sendRequest testOptions.tokenId:
'xB9ObFJtSvWtsQFWSQrrwS3nUfaClsMXqN0mRnGwzNDloRH2sPywxFmBOAOma2Yr'

Sat, 09 May 2015 08:14:37 GMT api:loopback:middleware:token appget testOptions tokenOptions TestModel.findForRequest:
{ expect: 200,
  header: 'authorization',
  done: [Function],
  get: '/',
  tokenId: 'xB9ObFJtSvWtsQFWSQrrwS3nUfaClsMXqN0mRnGwzNDloRH2sPywxFmBOAOma2Yr' }
{ searchDefaultTokenKeys: false,
  headers: [ 'authorization' ],
  model: 
   { [Function: ModelConstructor]
     setMaxListeners: [Function],
     emit: [Function],
     addListener: [Function],
     on: [Function],
     once: [Function],
     removeListener: [Function],
     removeAllListeners: [Function],
     listeners: [Function],
     super_: 
      { [Function: ModelConstructor]
        setMaxListeners: [Function],
        emit: [Function],
        addListener: [Function],
        on: [Function],
        once: [Function],
        removeListener: [Function],
        removeAllListeners: [Function],
        listeners: [Function],
        super_: [Object],
        defineProperty: [Function],
        getPropertyType: [Function],
        isProtectedProperty: [Function],
        isHiddenProperty: [Function],
        mixin: [Function],
        getDataSource: [Function],
        observe: [Function],
        removeObserver: [Function],
        clearObservers: [Function],
        notifyObserversOf: [Function],
        _notifyBaseObservers: [Function],
        afterInitialize: null,
        beforeValidate: null,
        afterValidate: null,
        beforeSave: null,
        afterSave: null,
        beforeCreate: null,
        afterCreate: null,
        beforeUpdate: null,
        afterUpdate: null,
        beforeDestroy: null,
        afterDestroy: null,
        validatesPresenceOf: [Function],
        validatesAbsenceOf: [Function],
        validatesLengthOf: [Function],
        validatesNumericalityOf: [Function],
        validatesInclusionOf: [Function],
        validatesExclusionOf: [Function],
        validatesFormatOf: [Function],
        validate: [Function],
        validateAsync: [Function],
        validatesUniquenessOf: [Function],
        getter: {},
        setter: {},
        definition: [Object],
        settings: [Object],
        forEachProperty: [Function],
        attachTo: [Function],
        extend: [Function],
        registerProperty: [Function],
        registry: [Object],
        setup: [Function: setupPersistedModel],
        _ACL: [Function: getACL],
        checkAccess: [Function],
        _getAccessTypeForMethod: [Function],
        getApp: [Function],
        remoteMethod: [Function],
        disableRemoteMethod: [Function],
        belongsToRemoting: [Function],
        hasOneRemoting: [Function],
        hasManyRemoting: [Function],
        scopeRemoting: [Function],
        nestRemoting: [Function],
        ValidationError: [Object],
        sharedClass: [Object],
        sharedCtor: [Object],
        beforeRemote: [Function],
        afterRemote: [Function],
        afterRemoteError: [Function],
        _runWhenAttachedToApp: [Function],
        create: [Object],
        updateOrCreate: [Object],
        upsert: [Object],
        findOrCreate: [Function: findOrCreate],
        exists: [Object],
        findById: [Object],
        find: [Object],
        findOne: [Object],
        destroyAll: [Object],
        remove: [Object],
        deleteAll: [Object],
        updateAll: [Object],
        update: [Object],
        destroyById: [Object],
        removeById: [Object],
        deleteById: [Object],
        count: [Object],
        getIdName: [Function],
        setupRemoting: [Function],
        diff: [Function],
        changes: [Function],
        checkpoint: [Function],
        currentCheckpoint: [Function],
        replicate: [Function],
        createUpdates: [Function],
        bulkUpdate: [Function],
        getChangeModel: [Function],
        getSourceId: [Function],
        enableChangeTracking: [Function],
        _defineChangeModel: [Function],
        rectifyAllChanges: [Function],
        handleChangeError: [Function],
        rectifyChange: [Function],
        findLastChange: [Function],
        updateLastChange: [Function],
        ANONYMOUS: [Object],
        createAccessTokenId: [Function],
        findForRequest: [Function],
        autoAttach: 'db',
        _mixins: [Object],
        _forDB: [Function],
        defaultScope: [Function],
        applyScope: [Function],
        applyProperties: [Function],
        lookupModel: [Function],
        findByIds: [Function],
        all: [Function],
        _normalize: [Function],
        _coerce: [Function],
        scope: [Function],
        normalizeInclude: [Function: normalizeInclude],
        include: [Function],
        hasMany: [Function: hasMany],
        belongsTo: [Function],
        hasAndBelongsToMany: [Function: hasAndBelongsToMany],
        hasOne: [Function: hasOne],
        referencesMany: [Function: referencesMany],
        embedsOne: [Function: embedsOne],
        embedsMany: [Function: embedsMany],
        _scopeMeta: {},
        shared: false,
        app: [Object] },
     defineProperty: [Function],
     getPropertyType: [Function],
     isProtectedProperty: [Function],
     isHiddenProperty: [Function],
     mixin: [Function],
     getDataSource: [Function],
     observe: [Function],
     removeObserver: [Function],
     clearObservers: [Function],
     notifyObserversOf: [Function],
     _notifyBaseObservers: [Function],
     afterInitialize: null,
     beforeValidate: null,
     afterValidate: null,
     beforeSave: null,
     afterSave: null,
     beforeCreate: null,
     afterCreate: null,
     beforeUpdate: null,
     afterUpdate: null,
     beforeDestroy: null,
     afterDestroy: null,
     validatesPresenceOf: [Function],
     validatesAbsenceOf: [Function],
     validatesLengthOf: [Function],
     validatesNumericalityOf: [Function],
     validatesInclusionOf: [Function],
     validatesExclusionOf: [Function],
     validatesFormatOf: [Function],
     validate: [Function],
     validateAsync: [Function],
     validatesUniquenessOf: [Function],
     getter: {},
     setter: {},
     definition: 
      { modelBuilder: [Object],
        name: 'MyToken',
        rawProperties: [Object],
        settings: [Object],
        relations: [],
        properties: [Object],
        _ids: [Object] },
     settings: 
      { strict: false,
        base: [Object],
        relations: [Object],
        acls: [Object] },
     forEachProperty: [Function],
     attachTo: [Function],
     extend: [Function],
     registerProperty: [Function],
     registry: 
      { defaultDataSources: [Object],
        modelBuilder: [Object],
        _memoryDataSources: [Object] },
     setup: [Function: setupPersistedModel],
     _ACL: [Function: getACL],
     checkAccess: [Function],
     _getAccessTypeForMethod: [Function],
     getApp: [Function],
     remoteMethod: [Function],
     disableRemoteMethod: [Function],
     belongsToRemoting: [Function],
     hasOneRemoting: [Function],
     hasManyRemoting: [Function],
     scopeRemoting: [Function],
     nestRemoting: [Function],
     ValidationError: { [Function: ValidationError] super_: [Object], maxPropertyStringLength: 32 },
     sharedClass: 
      { name: 'MyToken',
        ctor: [Circular],
        _methods: [Object],
        _resolvers: [Object],
        _disabledMethods: {},
        http: [Object],
        sharedCtor: [Object] },
     sharedCtor: { [Function] accepts: [Object], http: [Object], returns: [Object] },
     beforeRemote: [Function],
     afterRemote: [Function],
     afterRemoteError: [Function],
     _runWhenAttachedToApp: [Function],
     create: { [Function] _delegate: true },
     updateOrCreate: { [Function: upsert] _delegate: true },
     upsert: { [Function: upsert] _delegate: true },
     findOrCreate: [Function: findOrCreate],
     exists: { [Function: exists] _delegate: true },
     findById: { [Function: find] _delegate: true },
     find: { [Function: find] _delegate: true },
     findOne: { [Function: findOne] _delegate: true },
     destroyAll: { [Function: destroyAll] _delegate: true },
     remove: { [Function: destroyAll] _delegate: true },
     deleteAll: { [Function: destroyAll] _delegate: true },
     updateAll: { [Function] _delegate: true },
     update: { [Function] _delegate: true },
     destroyById: { [Function: deleteById] _delegate: true },
     removeById: { [Function: deleteById] _delegate: true },
     deleteById: { [Function: deleteById] _delegate: true },
     count: { [Function] _delegate: true },
     getIdName: [Function],
     setupRemoting: [Function],
     diff: [Function],
     changes: [Function],
     checkpoint: [Function],
     currentCheckpoint: [Function],
     replicate: [Function],
     createUpdates: [Function],
     bulkUpdate: [Function],
     getChangeModel: [Function],
     getSourceId: [Function],
     enableChangeTracking: [Function],
     _defineChangeModel: [Function],
     rectifyAllChanges: [Function],
     handleChangeError: [Function],
     rectifyChange: [Function],
     findLastChange: [Function],
     updateLastChange: [Function],
     ANONYMOUS: 
      { id: '$anonymous',
        created: Sat May 09 2015 10:14:36 GMT+0200 (Romance Daylight Time),
        ttl: 1209600 },
     createAccessTokenId: [Function],
     findForRequest: [Function],
     autoAttach: 'db',
     _forDB: [Function],
     defaultScope: [Function],
     applyScope: [Function],
     applyProperties: [Function],
     lookupModel: [Function],
     findByIds: [Function],
     all: [Function],
     _normalize: [Function],
     _coerce: [Function],
     scope: [Function],
     normalizeInclude: [Function: normalizeInclude],
     include: [Function],
     hasMany: [Function: hasMany],
     belongsTo: [Function],
     hasAndBelongsToMany: [Function: hasAndBelongsToMany],
     hasOne: [Function: hasOne],
     referencesMany: [Function: referencesMany],
     embedsOne: [Function: embedsOne],
     embedsMany: [Function: embedsMany],
     _scopeMeta: {},
     shared: false,
     app: 
      { [Function]
        domain: undefined,
        _events: [Object],
        _maxListeners: undefined,
        setMaxListeners: [Function: setMaxListeners],
        emit: [Function: emit],
        addListener: [Function: addListener],
        on: [Function: addListener],
        once: [Function: once],
        removeListener: [Function: removeListener],
        removeAllListeners: [Function: removeAllListeners],
        listeners: [Function: listeners],
        init: [Function],
        defaultConfiguration: [Function],
        lazyrouter: [Function],
        handle: [Function],
        use: [Function: use],
        route: [Function],
        engine: [Function],
        param: [Function],
        set: [Function],
        path: [Function],
        enabled: [Function],
        disabled: [Function],
        enable: [Function],
        disable: [Function],
        checkout: [Function],
        connect: [Function],
        copy: [Function],
        delete: [Function],
        get: [Function],
        head: [Function],
        lock: [Function],
        'm-search': [Function],
        merge: [Function],
        mkactivity: [Function],
        mkcol: [Function],
        move: [Function],
        notify: [Function],
        options: [Function],
        patch: [Function],
        post: [Function],
        propfind: [Function],
        proppatch: [Function],
        purge: [Function],
        put: [Function],
        report: [Function],
        search: [Function],
        subscribe: [Function],
        trace: [Function],
        unlock: [Function],
        unsubscribe: [Function],
        all: [Function],
        del: [Function],
        render: [Function],
        listen: [Function],
        request: [Object],
        response: [Object],
        cache: {},
        settings: [Object],
        engines: {},
        locals: [Object],
        mountpath: '/',
        __expressLazyRouter: [Function],
        _sortLayersByPhase: [Function],
        _findLayerByHandler: [Function],
        middleware: [Function],
        defineMiddlewarePhases: [Function],
        middlewareFromConfig: [Function],
        boot: [Function],
        enableAuth: [Function],
        dataSources: [Object],
        datasources: [Object],
        handler: [Function],
        remoteObjects: [Function],
        connector: [Function],
        dataSource: [Function],
        models: [Object],
        model: [Function],
        disuse: [Function],
        remotes: [Function],
        loopback: [Object],
        connectors: [Object],
        registry: [Object],
        _remotes: [Object],
        isAuthEnabled: true,
        booting: false,
        _models: [Object],
        _handlers: undefined,
        _router: [Object],
        _requestHandlingPhases: [Object] },
     _mixins: [ [Object], [Object], [Object] ] },
  currentUserLiteral: 'me' }
undefined

TypeError: undefined is not a function
    at appGet (c:\Users\ob_000\loopback\test\lib\lib-loopback-token-searchDefaultTokenKeys.js:84:13)
    at Layer.handle [as handle_request] (c:\Users\ob_000\loopback\node_modules\express\lib\router\layer.js:82:5)
    at next (c:\Users\ob_000\loopback\node_modules\express\lib\router\route.js:110:13)
    at Route.dispatch (c:\Users\ob_000\loopback\node_modules\express\lib\router\route.js:91:3)
    at Layer.handle [as handle_request] (c:\Users\ob_000\loopback\node_modules\express\lib\router\layer.js:82:5)
    at c:\Users\ob_000\loopback\node_modules\express\lib\router\index.js:267:22
    at Function.proto.process_params (c:\Users\ob_000\loopback\node_modules\express\lib\router\index.js:321:12)
    at next (c:\Users\ob_000\loopback\node_modules\express\lib\router\index.js:261:10)
    at c:\Users\ob_000\loopback\server\middleware\token.js:115:7
    at c:\Users\ob_000\loopback\common\models\access-token.js:108:15
    at ModelConstructor.AccessToken.validate (c:\Users\ob_000\loopback\common\models\access-token.js:152:9)
    at c:\Users\ob_000\loopback\common\models\access-token.js:104:17
    at c:\Users\ob_000\loopback\node_modules\loopback-datasource-juggler\lib\dao.js:1358:5
    at allCb (c:\Users\ob_000\loopback\node_modules\loopback-datasource-juggler\lib\dao.js:1297:7)
    at c:\Users\ob_000\loopback\node_modules\loopback-datasource-juggler\lib\connectors\memory.js:371:7
    at process._tickDomainCallback (node.js:381:11)
    at process.<anonymous> (c:\Users\ob_000\loopback\node_modules\continuation-local-storage\node_modules\async-listener\index.js:18:15)
        1) header, headers has header, searchDefaultTokenKeys is false
        - header, headers is empty, searchDefaultTokenKeys is true
      normal usage when not using options.searchDefaultTokenKeys
        - header, headers is empty, searchDefaultTokenKeys is undefined
      unnormal usage: for testing purposes, or other strange usages
        - header, headers is empty, searchDefaultTokenKeys is false

  User
    User.login
      √ Login a user using a custom createAccessToken
      √ Login a user using a custom createAccessToken with options
    ctor
      √ exports default AccessToken model


  7 passing (250ms)
  4 pending
  1 failing

  1) AccessToken api:loopback:middleware:token(options) options.searchDefaultTokenKeys:[true|false] normal usage for options.searchDefaultTokenKeys header, headers has header, searchDefaultTokenKeys is false:
     Error: expected 200 "OK", got 500 "Internal Server Error"
      at net.js:1392:10



